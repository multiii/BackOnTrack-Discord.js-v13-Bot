var SapphireRatelimits = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // src/index.ts
  var src_exports = {};
  __export(src_exports, {
    RateLimit: () => RateLimit,
    RateLimitManager: () => RateLimitManager
  });

  // src/lib/RateLimit.ts
  var RateLimit = class {
    constructor(manager) {
      __publicField(this, "remaining");
      __publicField(this, "expires");
      __publicField(this, "manager");
      this.manager = manager;
      this.reset();
    }
    get expired() {
      return this.remainingTime === 0;
    }
    get limited() {
      return this.remaining === 0 && !this.expired;
    }
    get remainingTime() {
      return Math.max(this.expires - Date.now(), 0);
    }
    consume() {
      if (this.limited)
        throw new Error("Cannot consume a limited bucket");
      if (this.expired)
        this.reset();
      this.remaining--;
      return this;
    }
    reset() {
      return this.resetRemaining().resetTime();
    }
    resetRemaining() {
      this.remaining = this.manager.limit;
      return this;
    }
    resetTime() {
      this.expires = Date.now() + this.manager.time;
      return this;
    }
  };

  // ../time-utilities/dist/index.mjs
  var __defProp2 = Object.defineProperty;
  var __defNormalProp2 = /* @__PURE__ */ __name((obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value, "__defNormalProp");
  var __publicField2 = /* @__PURE__ */ __name((obj, key, value) => {
    __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  }, "__publicField");
  var cronTokens = {
    jan: 1,
    feb: 2,
    mar: 3,
    apr: 4,
    may: 5,
    jun: 6,
    jul: 7,
    aug: 8,
    sep: 9,
    oct: 10,
    nov: 11,
    dec: 12,
    sun: 0,
    mon: 1,
    tue: 2,
    wed: 3,
    thu: 4,
    fri: 5,
    sat: 6
  };
  var tokensRegex = new RegExp(Object.keys(cronTokens).join("|"), "g");
  var DEFAULT_UNITS = {
    ["year"]: {
      1: "year",
      DEFAULT: "years"
    },
    ["month"]: {
      1: "month",
      DEFAULT: "months"
    },
    ["week"]: {
      1: "week",
      DEFAULT: "weeks"
    },
    ["day"]: {
      1: "day",
      DEFAULT: "days"
    },
    ["hour"]: {
      1: "hour",
      DEFAULT: "hours"
    },
    ["minute"]: {
      1: "minute",
      DEFAULT: "minutes"
    },
    ["second"]: {
      1: "second",
      DEFAULT: "seconds"
    }
  };
  var tokens2 = /* @__PURE__ */ new Map([
    ["nanosecond", 1 / 1e6],
    ["nanoseconds", 1 / 1e6],
    ["ns", 1 / 1e6],
    ["millisecond", 1],
    ["milliseconds", 1],
    ["ms", 1],
    ["second", 1e3],
    ["seconds", 1e3],
    ["sec", 1e3],
    ["secs", 1e3],
    ["s", 1e3],
    ["minute", 1e3 * 60],
    ["minutes", 1e3 * 60],
    ["min", 1e3 * 60],
    ["mins", 1e3 * 60],
    ["m", 1e3 * 60],
    ["hour", 1e3 * 60 * 60],
    ["hours", 1e3 * 60 * 60],
    ["hr", 1e3 * 60 * 60],
    ["hrs", 1e3 * 60 * 60],
    ["h", 1e3 * 60 * 60],
    ["day", 1e3 * 60 * 60 * 24],
    ["days", 1e3 * 60 * 60 * 24],
    ["d", 1e3 * 60 * 60 * 24],
    ["week", 1e3 * 60 * 60 * 24 * 7],
    ["weeks", 1e3 * 60 * 60 * 24 * 7],
    ["wk", 1e3 * 60 * 60 * 24 * 7],
    ["wks", 1e3 * 60 * 60 * 24 * 7],
    ["w", 1e3 * 60 * 60 * 24 * 7],
    ["month", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["months", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["b", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["mo", 1e3 * 60 * 60 * 24 * (365.25 / 12)],
    ["year", 1e3 * 60 * 60 * 24 * 365.25],
    ["years", 1e3 * 60 * 60 * 24 * 365.25],
    ["yr", 1e3 * 60 * 60 * 24 * 365.25],
    ["yrs", 1e3 * 60 * 60 * 24 * 365.25],
    ["y", 1e3 * 60 * 60 * 24 * 365.25]
  ]);
  var _Duration = class {
    constructor(pattern) {
      __publicField2(this, "offset");
      this.offset = _Duration.parse(pattern.toLowerCase());
    }
    get fromNow() {
      return this.dateFrom(new Date());
    }
    dateFrom(date) {
      return new Date(date.getTime() + this.offset);
    }
    static parse(pattern) {
      let result = 0;
      let valid = false;
      pattern.replace(_Duration.kCommaRegex, "").replace(_Duration.kAanRegex, "1").replace(_Duration.kPatternRegex, (_, i, units) => {
        const token = tokens2.get(units);
        if (token !== void 0) {
          result += Number(i) * token;
          valid = true;
        }
        return "";
      });
      return valid ? result : NaN;
    }
  };
  var Duration = _Duration;
  __publicField2(Duration, "kPatternRegex", /(-?\d*\.?\d+(?:e[-+]?\d+)?)\s*([a-zÎ¼]*)/gi);
  __publicField2(Duration, "kCommaRegex", /,/g);
  __publicField2(Duration, "kAanRegex", /\ban?\b/gi);
  var kTimeDurations = [
    ["year", 31536e6],
    ["month", 2628e6],
    ["week", 1e3 * 60 * 60 * 24 * 7],
    ["day", 1e3 * 60 * 60 * 24],
    ["hour", 1e3 * 60 * 60],
    ["minute", 1e3 * 60],
    ["second", 1e3]
  ];
  var TimerManager = class extends null {
    static setTimeout(fn, delay, ...args) {
      const timeout = setTimeout(() => {
        this.storedTimeouts.delete(timeout);
        fn(...args);
      }, delay);
      this.storedTimeouts.add(timeout);
      return timeout;
    }
    static clearTimeout(timeout) {
      clearTimeout(timeout);
      this.storedTimeouts.delete(timeout);
    }
    static setInterval(fn, delay, ...args) {
      const interval = setInterval(fn, delay, ...args);
      this.storedIntervals.add(interval);
      return interval;
    }
    static clearInterval(interval) {
      clearInterval(interval);
      this.storedIntervals.delete(interval);
    }
    static destroy() {
      for (const i of this.storedTimeouts)
        clearTimeout(i);
      for (const i of this.storedIntervals)
        clearInterval(i);
      this.storedTimeouts.clear();
      this.storedIntervals.clear();
    }
  };
  __publicField2(TimerManager, "storedTimeouts", /* @__PURE__ */ new Set());
  __publicField2(TimerManager, "storedIntervals", /* @__PURE__ */ new Set());

  // src/lib/RateLimitManager.ts
  var _RateLimitManager = class extends Map {
    constructor(time, limit = 1) {
      super();
      __publicField(this, "time");
      __publicField(this, "limit");
      __publicField(this, "sweepInterval");
      this.time = time;
      this.limit = limit;
    }
    acquire(id) {
      return this.get(id) ?? this.create(id);
    }
    create(id) {
      const value = new RateLimit(this);
      this.set(id, value);
      return value;
    }
    set(id, value) {
      this.sweepInterval ?? (this.sweepInterval = TimerManager.setInterval(this.sweep.bind(this), _RateLimitManager.sweepIntervalDuration));
      return super.set(id, value);
    }
    sweep() {
      for (const [id, value] of this.entries()) {
        if (value.expired)
          this.delete(id);
      }
      if (this.size === 0) {
        TimerManager.clearInterval(this.sweepInterval);
        this.sweepInterval = null;
      }
    }
  };
  var RateLimitManager = _RateLimitManager;
  __publicField(RateLimitManager, "sweepIntervalDuration", 3e4);
  return __toCommonJS(src_exports);
})();
//# sourceMappingURL=index.global.js.map