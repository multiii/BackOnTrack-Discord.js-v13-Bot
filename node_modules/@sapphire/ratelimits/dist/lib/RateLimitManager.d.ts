import { RateLimit } from './RateLimit';
export declare class RateLimitManager<K = string> extends Map<K, RateLimit<K>> {
    /**
     * The amount of milliseconds for the {@link RateLimit ratelimits} from this manager to expire.
     */
    readonly time: number;
    /**
     * The amount of times a {@link RateLimit} can drip before it's limited.
     */
    readonly limit: number;
    /**
     * The interval to sweep expired {@link RateLimit ratelimits}.
     */
    private sweepInterval;
    /**
     * @param time The amount of milliseconds for the ratelimits from this manager to expire.
     * @param limit The amount of times a {@link RateLimit} can drip before it's limited.
     */
    constructor(time: number, limit?: number);
    /**
     * Gets a {@link RateLimit} from this manager or creates it if it does not exist.
     * @param id The id for the {@link RateLimit}
     */
    acquire(id: K): RateLimit<K>;
    /**
     * Creates a {@link RateLimit} for this manager.
     * @param id The id the {@link RateLimit} belongs to
     */
    create(id: K): RateLimit<K>;
    /**
     * Wraps Collection's set method to set interval to sweep inactive {@link RateLimit}s.
     * @param id The id the {@link RateLimit} belongs to
     * @param value The {@link RateLimit} to set
     */
    set(id: K, value: RateLimit<K>): this;
    /**
     * Wraps Collection's sweep method to clear the interval when this manager is empty.
     */
    sweep(): void;
    /**
     * The delay in milliseconds for {@link RateLimitManager.sweepInterval}.
     */
    static sweepIntervalDuration: number;
}
//# sourceMappingURL=RateLimitManager.d.ts.map