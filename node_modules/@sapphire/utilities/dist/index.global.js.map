{"version":3,"sources":["../src/index.ts","../src/lib/arrayStrictEquals.ts","../src/lib/cast.ts","../src/lib/chunk.ts","../src/lib/classExtends.ts","../src/lib/codeBlock.ts","../src/lib/splitText.ts","../src/lib/cutText.ts","../src/lib/debounce/index.ts","../src/lib/isPrimitive.ts","../src/lib/deepClone.ts","../src/lib/isNullOrUndefined.ts","../src/lib/filterNullAndUndefined.ts","../src/lib/isNullOrUndefinedOrEmpty.ts","../src/lib/filterNullAndUndefinedAndEmpty.ts","../src/lib/isNullOrUndefinedOrZero.ts","../src/lib/filterNullAndUndefinedAndZero.ts","../src/lib/hasAtLeastOneKeyInMap.ts","../src/lib/inlineCodeBlock.ts","../src/lib/isClass.ts","../src/lib/isFunction.ts","../src/lib/isNumber.ts","../src/lib/isObject.ts","../src/lib/isThenable.ts","../src/lib/makeObject.ts","../src/lib/mergeDefault.ts","../src/lib/mergeObjects.ts","../src/lib/noop.ts","../src/lib/objectToTuples.ts","../src/lib/parseUrl.ts","../src/lib/partition.ts","../src/lib/range.ts","../src/lib/regExpEsc.ts","../src/lib/roundNumber.ts","../src/lib/toTitleCase.ts","../src/lib/tryParse.ts"],"sourcesContent":["export * from './lib/arrayStrictEquals';\nexport * from './lib/cast';\nexport * from './lib/chunk';\nexport * from './lib/classExtends';\nexport * from './lib/codeBlock';\nexport * from './lib/cutText';\nexport * from './lib/debounce';\nexport * from './lib/deepClone';\nexport * from './lib/filterNullAndUndefined';\nexport { filterNullAndUndefined as filterNullish } from './lib/filterNullAndUndefined';\nexport * from './lib/filterNullAndUndefinedAndEmpty';\nexport { filterNullAndUndefinedAndEmpty as filterNullishOrEmpty } from './lib/filterNullAndUndefinedAndEmpty';\nexport * from './lib/filterNullAndUndefinedAndZero';\nexport { filterNullAndUndefinedAndZero as filterNullishOrZero } from './lib/filterNullAndUndefinedAndZero';\nexport * from './lib/hasAtLeastOneKeyInMap';\nexport * from './lib/inlineCodeBlock';\nexport * from './lib/isClass';\nexport * from './lib/isFunction';\nexport * from './lib/isNullOrUndefined';\nexport { isNullOrUndefined as isNullish } from './lib/isNullOrUndefined';\nexport * from './lib/isNullOrUndefinedOrEmpty';\nexport { isNullOrUndefinedOrEmpty as isNullishOrEmpty } from './lib/isNullOrUndefinedOrEmpty';\nexport * from './lib/isNullOrUndefinedOrZero';\nexport { isNullOrUndefinedOrZero as isNullishOrZero } from './lib/isNullOrUndefinedOrZero';\nexport * from './lib/isNumber';\nexport * from './lib/isObject';\nexport * from './lib/isPrimitive';\nexport * from './lib/isThenable';\nexport * from './lib/makeObject';\nexport * from './lib/mergeDefault';\nexport * from './lib/mergeObjects';\nexport * from './lib/noop';\nexport * from './lib/objectToTuples';\nexport * from './lib/parseUrl';\nexport * from './lib/partition';\nexport * from './lib/range';\nexport * from './lib/regExpEsc';\nexport * from './lib/roundNumber';\nexport * from './lib/splitText';\nexport { toTitleCase, ToTitleCaseOptions } from './lib/toTitleCase';\nexport * from './lib/tryParse';\nexport * from './lib/utilityTypes';\n","/**\n * Compare if both arrays are strictly equal\n * @param arr1 The array to compare to\n * @param arr2 The array to compare with\n */\nexport function arrayStrictEquals<T extends readonly unknown[]>(arr1: T, arr2: T): boolean {\n\tif (arr1 === arr2) return true;\n\tif (arr1.length !== arr2.length) return false;\n\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i] || typeof arr1[i] !== typeof arr2[i]) return false;\n\t}\n\treturn true;\n}\n","/**\n * Casts any value to `T`\n *\n * Note that this function is not type-safe, and may cause runtime errors if used incorrectly.\n * Also note that this function is effectively useless in a JavaScript project, it only serves a purpose for TypeScript projects.\n *\n * @param value The value to cast to another type\n * @returns The value but as type `T`\n */\nexport function cast<T>(value: unknown): T {\n\treturn value as T;\n}\n","/**\n * Splits up an array into chunks\n * @param array The array to chunk up\n * @param chunkSize The size of each individual chunk\n */\nexport function chunk<T>(array: readonly T[], chunkSize: number): T[][] {\n\tif (!Array.isArray(array)) throw new TypeError('entries must be an array.');\n\tif (!Number.isInteger(chunkSize)) throw new TypeError('chunkSize must be an integer.');\n\tif (chunkSize < 1) throw new RangeError('chunkSize must be 1 or greater.');\n\tconst clone: T[] = array.slice();\n\tconst chunks: T[][] = [];\n\twhile (clone.length) chunks.push(clone.splice(0, chunkSize));\n\treturn chunks;\n}\n","import type { Ctor } from './utilityTypes';\n\n/**\n * Checks whether or not the value class extends the base class.\n * @param value The constructor to be checked against.\n * @param base The base constructor.\n */\nexport function classExtends<T extends Ctor>(value: Ctor, base: T): value is T {\n\tlet ctor: Ctor | null = value;\n\twhile (ctor !== null) {\n\t\tif (ctor === base) return true;\n\t\tctor = Object.getPrototypeOf(ctor);\n\t}\n\n\treturn false;\n}\n","const zws = String.fromCharCode(8203);\n\n/**\n * Wraps text in a markdown codeblock with optionally a language indicator for syntax highlighting\n * @param language The codeblock language\n * @param expression The expression to be wrapped in the codeblock\n */\nexport function codeBlock<T>(language: string, expression: T): string {\n\tif (typeof expression === 'string') {\n\t\tif (expression.length === 0) return `\\`\\`\\`${zws}\\`\\`\\``;\n\t\treturn `\\`\\`\\`${language}\\n${expression.replace(/```/, `\\`${zws}\\`\\``).replace(/`$/g, `\\`${zws}`)}\\`\\`\\``;\n\t}\n\treturn `\\`\\`\\`${language}\\n${expression || zws}\\`\\`\\``;\n}\n","/**\n * Split a string by its latest space character in a range from the character 0 to the selected one.\n * @param str The text to split.\n * @param length The length of the desired string.\n * @param char The character to split with\n * @copyright 2019 Antonio Román\n * @license Apache-2.0\n */\nexport function splitText(str: string, length: number, char = ' ') {\n\tconst x = str.substring(0, length).lastIndexOf(char);\n\tconst pos = x === -1 ? length : x;\n\treturn str.substring(0, pos);\n}\n","import { splitText } from './splitText';\n\n/**\n * Split a text by its latest space character in a range from the character 0 to the selected one.\n * @param str The text to split.\n * @param length The length of the desired string.\n * @copyright 2019 Antonio Román\n * @license Apache-2.0\n */\nexport function cutText(str: string, length: number) {\n\tif (str.length < length) return str;\n\tconst cut = splitText(str, length - 3);\n\tif (cut.length < length - 3) return `${cut}...`;\n\treturn `${cut.slice(0, length - 3)}...`;\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\nexport interface DebounceSettings {\n\t/**\n\t * The number of milliseconds to delay.\n\t * @default 0\n\t */\n\twait?: number;\n\n\t/**\n\t * The maximum time `func` is allowed to be delayed before it's invoked\n\t * @default null\n\t */\n\tmaxWait?: number | null;\n}\n\nexport interface DebouncedFunc<FnArgumentsType extends any[], FnReturnType> {\n\t/**\n\t * Call the original function, but applying the debounce rules.\n\t *\n\t * If the debounced function can be run immediately, this calls it and returns its return\n\t * value.\n\t *\n\t * Otherwise, it returns the return value of the last invokation, or undefined if the debounced\n\t * function was not invoked yet.\n\t */\n\t(...args: FnArgumentsType): FnReturnType | undefined;\n\n\t/**\n\t * Throw away any pending invokation of the debounced function.\n\t */\n\tcancel(): void;\n\n\t/**\n\t * If there is a pending invokation of the debounced function, invoke it immediately and return\n\t * its return value.\n\t *\n\t * Otherwise, return the value from the last invokation, or undefined if the debounced function\n\t * was never invoked.\n\t */\n\tflush(): FnReturnType | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since\n * the last time the debounced function was invoked. The debounced function comes with a cancel method to\n * cancel delayed invocations and a flush method to immediately invoke them. Provide an options object to\n * indicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent\n * calls to the debounced function return the result of the last func invocation.\n *\n * Note: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only\n * if the the debounced function is invoked more than once during the wait timeout.\n *\n * See David Corbacho’s article for details over the differences between _.debounce and _.throttle.\n *\n * @param func The function to debounce.\n * @param wait The number of milliseconds to delay.\n * @param options The options object.\n * @return Returns the new debounced function.\n */\nexport function debounce<FnArgumentsType extends any[], FnReturnType>(\n\tfunc: (...args: FnArgumentsType) => FnReturnType,\n\toptions: DebounceSettings = {}\n): DebouncedFunc<FnArgumentsType, FnReturnType> {\n\tlet lastArgs: FnArgumentsType | undefined;\n\tlet result: FnReturnType | undefined;\n\tlet timerId: NodeJS.Timeout | undefined;\n\tlet lastCallTime: number | undefined;\n\tlet lastInvokeTime = 0;\n\n\tconst wait = options.wait ?? 0;\n\tconst maxWait = typeof options.maxWait === 'number' ? Math.max(options.maxWait, wait) : null;\n\n\tfunction invokeFunc(time: number) {\n\t\tconst args = lastArgs;\n\n\t\tlastArgs = undefined;\n\t\tlastInvokeTime = time;\n\t\tresult = func(...args!);\n\t\treturn result;\n\t}\n\n\tfunction leadingEdge(time: number) {\n\t\t// Reset any `maxWait` timer.\n\t\tlastInvokeTime = time;\n\t\t// Start the timer for the trailing edge.\n\t\ttimerId = setTimeout(timerExpired, wait);\n\t\t// Invoke the leading edge.\n\t\treturn result;\n\t}\n\n\tfunction remainingWait(time: number) {\n\t\tconst timeSinceLastCall = time - lastCallTime!;\n\t\tconst timeSinceLastInvoke = time - lastInvokeTime;\n\t\tconst result = wait - timeSinceLastCall;\n\n\t\treturn maxWait === null ? result : Math.min(result, maxWait - timeSinceLastInvoke);\n\t}\n\n\tfunction shouldInvoke(time: number) {\n\t\tconst timeSinceLastCall = time - lastCallTime!;\n\t\tconst timeSinceLastInvoke = time - lastInvokeTime;\n\n\t\t// Either this is the first call, activity has stopped and we're at the\n\t\t// trailing edge, the system time has gone backwards and we're treating\n\t\t// it as the trailing edge, or we've hit the `maxWait` limit.\n\t\treturn (\n\t\t\tlastCallTime === undefined || //\n\t\t\ttimeSinceLastCall >= wait ||\n\t\t\ttimeSinceLastCall < 0 ||\n\t\t\t(maxWait !== null && timeSinceLastInvoke >= maxWait)\n\t\t);\n\t}\n\n\tfunction timerExpired() {\n\t\tconst time = Date.now();\n\t\tif (shouldInvoke(time)) {\n\t\t\ttrailingEdge(time);\n\t\t\treturn;\n\t\t}\n\t\t// Restart the timer.\n\t\ttimerId = setTimeout(timerExpired, remainingWait(time));\n\t}\n\n\tfunction trailingEdge(time: number) {\n\t\ttimerId = undefined;\n\t\treturn invokeFunc(time);\n\t}\n\n\tfunction cancel() {\n\t\tif (timerId !== undefined) {\n\t\t\tclearTimeout(timerId);\n\t\t}\n\n\t\tlastInvokeTime = 0;\n\t\tlastArgs = undefined;\n\t\tlastCallTime = undefined;\n\t\ttimerId = undefined;\n\t}\n\n\tfunction flush() {\n\t\treturn timerId === undefined ? result : trailingEdge(Date.now());\n\t}\n\n\tfunction debounced(...args: FnArgumentsType) {\n\t\tconst time = Date.now();\n\t\tconst isInvoking = shouldInvoke(time);\n\n\t\tlastArgs = args;\n\t\tlastCallTime = time;\n\n\t\tif (isInvoking) {\n\t\t\tif (timerId === undefined) {\n\t\t\t\treturn leadingEdge(lastCallTime);\n\t\t\t}\n\t\t\tif (maxWait !== null) {\n\t\t\t\t// Handle invocations in a tight loop.\n\t\t\t\ttimerId = setTimeout(timerExpired, wait);\n\t\t\t\treturn invokeFunc(lastCallTime);\n\t\t\t}\n\t\t}\n\n\t\tif (timerId === undefined) {\n\t\t\ttimerId = setTimeout(timerExpired, wait);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tdebounced.cancel = cancel;\n\tdebounced.flush = flush;\n\n\treturn debounced;\n}\n","const primitiveTypes = ['string', 'bigint', 'number', 'boolean'];\n\n/**\n * Check whether a value is a primitive\n * @param input The input to check\n */\nexport function isPrimitive(input: unknown): input is string | bigint | number | boolean {\n\treturn primitiveTypes.includes(typeof input);\n}\n","import { isPrimitive } from './isPrimitive';\n\n/**\n * Deep clone an object\n * @param source The object to clone\n */\nexport function deepClone<T>(source: T): T {\n\t// Check if it's a primitive (with exception of function and null, which is typeof object)\n\tif (source === null || isPrimitive(source)) {\n\t\treturn source;\n\t}\n\n\tif (source instanceof Date) {\n\t\tconst output = new (source.constructor as DateConstructor)(source);\n\n\t\treturn output as unknown as T;\n\t}\n\n\tif (Array.isArray(source)) {\n\t\tconst output = new (source.constructor as ArrayConstructor)(source.length) as unknown as T & T extends (infer S)[] ? S[] : never;\n\n\t\tfor (let i = 0; i < source.length; i++) {\n\t\t\toutput[i] = deepClone(source[i]);\n\t\t}\n\n\t\treturn output as unknown as T;\n\t}\n\n\tif (source instanceof Map) {\n\t\tconst output = new (source.constructor as MapConstructor)() as unknown as T & T extends Map<infer K, infer V> ? Map<K, V> : never;\n\n\t\tfor (const [key, value] of source.entries()) {\n\t\t\toutput.set(key, deepClone(value));\n\t\t}\n\n\t\treturn output as unknown as T;\n\t}\n\n\tif (source instanceof Set) {\n\t\tconst output = new (source.constructor as SetConstructor)() as unknown as T & T extends Set<infer K> ? Set<K> : never;\n\n\t\tfor (const value of source.values()) {\n\t\t\toutput.add(deepClone(value));\n\t\t}\n\n\t\treturn output as unknown as T;\n\t}\n\n\tif (typeof source === 'object') {\n\t\tconst output = new ((source as T & (object | Record<PropertyKey, unknown>)).constructor as ObjectConstructor)() as unknown as Record<\n\t\t\tPropertyKey,\n\t\t\tunknown\n\t\t>;\n\n\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\tObject.defineProperty(output, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: deepClone(value),\n\t\t\t\twritable: true\n\t\t\t});\n\t\t}\n\n\t\treturn output as unknown as T;\n\t}\n\n\treturn source;\n}\n","import type { Nullish } from './utilityTypes';\n\n/**\n * Checks whether or not a value is `null` or `undefined`\n * @param value The value to check\n */\nexport function isNullOrUndefined(value: unknown): value is Nullish {\n\treturn value === undefined || value === null;\n}\n","import { isNullOrUndefined } from './isNullOrUndefined';\nimport type { Nullish } from './utilityTypes';\n\n/**\n * Checks whether a value is not `null` nor `undefined`.\n * This can be used in {@link Array.filter} to remove `null` and `undefined` from the array type\n * @param value The value to verify that is neither `null` nor `undefined`\n * @returns A boolean that is `true` if the value is neither `null` nor `undefined`, false otherwise.\n * @example\n * ```typescript\n * // TypeScript Type: (string | undefined | null)[]\n * const someArray = ['one', 'two', undefined, null, 'five'];\n *\n * // TypeScript Type: string[]\n * const filteredArray = someArray.filter(filterNullAndUndefined);\n * // Result: ['one', 'two', 'five']\n * ```\n */\nexport function filterNullAndUndefined<TValue>(value: TValue | Nullish): value is TValue {\n\treturn !isNullOrUndefined(value);\n}\n","import { isNullOrUndefined } from './isNullOrUndefined';\nimport type { Nullish } from './utilityTypes';\n\n/**\n * Checks whether or not a value is `null`, `undefined` or `''`, `[]`\n * @param value The value to check\n */\nexport function isNullOrUndefinedOrEmpty(value: unknown): value is Nullish | '' {\n\treturn isNullOrUndefined(value) || (value as string | unknown[]).length === 0;\n}\n","import { isNullOrUndefinedOrEmpty } from './isNullOrUndefinedOrEmpty';\nimport type { Nullish } from './utilityTypes';\n\n/**\n * Checks whether a value is not `null` nor `undefined` nor `''` (empty string).\n * This can be used in {@link Array.filter} to remove `null`, `undefined` from the array type\n * @param value The value to verify that is neither `null`, `undefined` nor `''` (empty string)\n * @returns A boolean that is `true` if the value is neither `null`, `undefined` nor `''` (empty string), false otherwise.\n * @example\n * ```typescript\n * // TypeScript Type: (string | undefined | null)[]\n * const someArray = ['one', 'two', undefined, null, ''];\n *\n * // TypeScript Type: string[]\n * const filteredArray = someArray.filter(filterNullAndUndefinedAndEmpty);\n * // Result: ['one', 'two']\n * ```\n */\nexport function filterNullAndUndefinedAndEmpty<TValue>(value: TValue | Nullish | ''): value is TValue {\n\treturn !isNullOrUndefinedOrEmpty(value);\n}\n","import { isNullOrUndefined } from './isNullOrUndefined';\nimport type { Nullish } from './utilityTypes';\n\n/**\n * Checks whether or not a value is `null`, `undefined` or `0`\n * @param value The value to check\n */\nexport function isNullOrUndefinedOrZero(value: unknown): value is Nullish | 0 {\n\treturn value === 0 || isNullOrUndefined(value);\n}\n","import { isNullOrUndefinedOrZero } from './isNullOrUndefinedOrZero';\nimport type { Nullish } from './utilityTypes';\n\n/**\n * Checks whether a value is not `null` nor `undefined` nor `0`.\n * This can be used in {@link Array.filter} to remove `null`, `undefined` from the array type\n * @param value The value to verify that is neither `null`, `undefined` nor `0`\n * @returns A boolean that is `true` if the value is neither `null`, `undefined` nor `0`, false otherwise.\n * @example\n * ```typescript\n * // TypeScript Type: (string | number | undefined | null)[]\n * const someArray = ['one', 'two', undefined, null, 0, 1];\n *\n * // TypeScript Type: (string | number)[]\n * const filteredArray = someArray.filter(filterNullAndUndefinedAndZero);\n * // Result: ['one', 'two', 1]\n * ```\n */\nexport function filterNullAndUndefinedAndZero<TValue>(value: TValue | Nullish | 0): value is TValue {\n\treturn !isNullOrUndefinedOrZero(value);\n}\n","/**\n * Checks whether any of the {@link keys} are in the {@link map}\n * @param map The map to check\n * @param keys The keys to find in the map\n * @returns `true` if at least one of the {@link keys} is in the {@link map}, `false` otherwise.\n */\nexport function hasAtLeastOneKeyInMap<T>(map: ReadonlyMap<T, any>, keys: readonly T[]): boolean {\n\treturn keys.some((key) => map.has(key));\n}\n","const zws = String.fromCharCode(8203);\n\n/**\n * Wraps text in a markdown inline codeblock\n * @param expression The expression to be wrapped in the codeblock\n */\nexport function inlineCodeBlock(input: string): string {\n\treturn `\\`${input.replace(/ /g, '\\u00A0').replace(/`/g, `\\`${zws}`)}\\``;\n}\n","import type { Ctor } from './utilityTypes';\n\n/**\n * Verify if the input is a class constructor.\n * @param input The function to verify\n */\nexport function isClass(input: unknown): input is Ctor {\n\treturn typeof input === 'function' && typeof input.prototype === 'object';\n}\n","/**\n * Verify if the input is a function.\n * @param input The function to verify\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(input: unknown): input is Function {\n\treturn typeof input === 'function';\n}\n","/**\n * Verify if a number is a finite number.\n * @param input The number to verify\n */\nexport function isNumber(input: unknown): input is number {\n\treturn typeof input === 'number' && !isNaN(input) && Number.isFinite(input);\n}\n","import type { Constructor, NonNullObject } from './utilityTypes';\n\n/**\n * Verify if the input is an object literal (or class).\n * @param input The object to verify\n * @param constructorType The type of the constructor of the object. Use this if you want a `class` of your choosing to pass the check as well.\n */\nexport function isObject(input: unknown, constructorType?: ObjectConstructor): input is NonNullObject;\nexport function isObject<T extends Constructor<unknown>>(input: unknown, constructorType: T): input is InstanceType<T>;\nexport function isObject<T extends Constructor<unknown> = ObjectConstructor>(input: unknown, constructorType?: T): input is NonNullObject {\n\treturn typeof input === 'object' && input ? input.constructor === (constructorType ?? Object) : false;\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { isFunction } from './isFunction';\n\nexport interface Thenable {\n\tthen: Function;\n\tcatch: Function;\n}\n\nfunction hasThen(input: { then?: Function }): boolean {\n\treturn Reflect.has(input, 'then') && isFunction(input.then);\n}\n\nfunction hasCatch(input: { catch?: Function }): boolean {\n\treturn Reflect.has(input, 'catch') && isFunction(input.catch);\n}\n\n/**\n * Verify if an object is a promise.\n * @param input The promise to verify\n */\nexport function isThenable(input: unknown): input is Thenable {\n\tif (typeof input !== 'object' || input === null) return false;\n\treturn input instanceof Promise || (input !== Promise.prototype && hasThen(input) && hasCatch(input));\n}\n","/**\n * Turn a dotted path into a json object.\n * @param path The dotted path\n * @param value The value\n * @param obj The object to edit\n */\nexport function makeObject(path: string, value: unknown, obj: Record<string, unknown> = {}): Record<string, unknown> {\n\tif (path.includes('.')) {\n\t\tconst route = path.split('.');\n\t\tconst lastKey = route.pop() as string;\n\t\tlet reference = obj;\n\t\tfor (const key of route) {\n\t\t\tif (!reference[key]) reference[key] = {};\n\t\t\treference = reference[key] as Record<string, unknown>;\n\t\t}\n\t\treference[lastKey] = value;\n\t} else {\n\t\tobj[path] = value;\n\t}\n\treturn obj;\n}\n","import { deepClone } from './deepClone';\nimport { isObject } from './isObject';\nimport type { DeepRequired, NonNullObject } from './utilityTypes';\n\n/**\n * Deep merges 2 objects. Properties from the second parameter are applied to the first.\n * @remark `overwrites` is also mutated!\n * @remark If the value of a key in `overwrites` is `undefined` then the value of that same key in `base` is used instead!\n * @remark This is essentially `{ ...base, ...overwrites }` but recursively\n * @param base Base object\n * @param overwrites Overwrites to apply\n * @example\n * ```typescript\n * const base = { a: 0, b: 1 };\n * const overwrites = {}; // will be { a: 0, b: 1 } after merge\n * mergeDefault(base, overwrites) // { a: 0, b: 1 }\n * ```\n * @example\n * ```typescript\n * const base = { a: 0, b: 1 };\n * const overwrites = { a: 2, i: 3 };\n * mergeDefault(base, overwrites) // { a: 2, i: 3, b: 1 };\n * ```\n * @example\n * ```typescript\n * const base = { a: 0, b: 1 };\n * const overwrites = { a: null };\n * mergeDefault(base, overwrites) // { a: null, b: 1 };\n * ```\n * @example\n * ```typescript\n * const base = { a: 0, b: 1 };\n * const overwrites = { a: undefined };\n * mergeDefault(base, overwrites) // { a: 0, b: 1 };\n * ```\n * @example\n * ```typescript\n * const base = { a: null };\n * const overwrites = { a: { b: 5 } };\n * mergeDefault(base, overwrites) // { a: { b: 5 } };\n * ```\n */\nexport function mergeDefault<A extends NonNullObject, B extends Partial<A>>(base: A, overwrites?: B): DeepRequired<A & B> {\n\t// If no overwrites are specified then deep clone the base\n\tif (!overwrites) return deepClone(base) as DeepRequired<A & B>;\n\n\tfor (const [baseKey, baseValue] of Object.entries(base)) {\n\t\tconst overwritesValueAtBaseKey = Reflect.get(overwrites, baseKey);\n\n\t\tif (typeof overwritesValueAtBaseKey === 'undefined') {\n\t\t\tReflect.set(overwrites, baseKey, deepClone(baseValue));\n\t\t} else if (isObject(overwritesValueAtBaseKey)) {\n\t\t\tReflect.set(overwrites, baseKey, mergeDefault((baseValue ?? {}) as NonNullObject, overwritesValueAtBaseKey));\n\t\t}\n\t}\n\n\treturn overwrites as DeepRequired<A & B>;\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { isObject } from './isObject';\n\n/**\n * Merges two objects\n * @param objTarget The object to be merged\n * @param objSource The object to merge\n */\nexport function mergeObjects<A extends object, B extends object>(objTarget: A, objSource: Readonly<B>): A & B {\n\tfor (const [key, value] of Object.entries(objSource)) {\n\t\tconst targetValue = Reflect.get(objTarget, key);\n\t\tif (isObject(value)) {\n\t\t\tReflect.set(objTarget, key, isObject(targetValue) ? mergeObjects(targetValue, value as object) : value);\n\t\t} else if (!isObject(targetValue)) {\n\t\t\tReflect.set(objTarget, key, value);\n\t\t}\n\t}\n\n\treturn objTarget as A & B;\n}\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n","import { isObject } from './isObject';\n\n/**\n * Convert an object to a tuple\n * @param value The object to convert\n * @param prefix The prefix for the key\n */\nexport function objectToTuples(original: Record<string, unknown>, prefix = ''): [string, unknown][] {\n\tconst entries: [string, unknown][] = [];\n\tfor (const [key, value] of Object.entries(original)) {\n\t\tif (isObject(value)) {\n\t\t\tentries.push(...objectToTuples(value as Record<string, unknown>, `${prefix}${key}.`));\n\t\t} else {\n\t\t\tentries.push([`${prefix}${key}`, value]);\n\t\t}\n\t}\n\n\treturn entries;\n}\n","import type { URL } from 'node:url';\n\n/**\n * Parses an URL, returns null if invalid.\n * @param url The url to parse\n */\nexport function parseURL(url: string): URL | null {\n\ttry {\n\t\t// @ts-expect-error URL is global in NodeJS and evergreen Browsers\n\t\treturn new URL(url);\n\t} catch {\n\t\treturn null;\n\t}\n}\n","import { isFunction } from './isFunction';\n\n/**\n * Partitions `array` into a tuple of two arrays,\n * where one array contains all elements that satisfies `predicate`,\n * and the other contains all elements that do not satisfy `predicate`.\n * @param array The array to partition. This array is not mutated.\n * @param predicate The predicate function to determine in which partition the item should be placed.\n * The function should return true for items that should be placed in the first partition, and false for those that should be placed in the second partition.\n * @returns A tuple of two arrays.\n */\nexport function partition<T>(array: T[], predicate: (value: T, index: number) => boolean) {\n\tif (!Array.isArray(array)) throw new TypeError('entries must be an array.');\n\tif (!isFunction(predicate)) throw new TypeError('predicate must be an function that returns a boolean value.');\n\n\tconst partitionOne: T[] = [];\n\tconst partitionTwo: T[] = [];\n\n\tfor (let i = 0; i < array.length; i++) {\n\t\tif (predicate(array[i], i)) {\n\t\t\tpartitionOne.push(array[i]);\n\t\t} else {\n\t\t\tpartitionTwo.push(array[i]);\n\t\t}\n\t}\n\n\treturn [partitionOne, partitionTwo];\n}\n","/**\n * Get an array of numbers with the selected range\n * @param min The minimum value\n * @param max The maximum value\n * @param step The step value\n */\nexport function range(min: number, max: number, step: number): number[] {\n\treturn new Array(Math.floor((max - min) / step) + 1).fill(0).map((_val, i) => min + i * step);\n}\n","// eslint-disable-next-line @typescript-eslint/naming-convention\nconst REGEXPESC = /[-/\\\\^$*+?.()|[\\]{}]/g;\n\n/**\n * Cleans a string from regex injection\n * @param str The string to clean\n */\nexport function regExpEsc(str: string): string {\n\treturn str.replace(REGEXPESC, '\\\\$&');\n}\n","/**\n * Properly rounds up or down a number.\n * Also supports strings using an exponent to indicate large or small numbers.\n * @param num The number to round off\n * @param scale The amount of decimals to retain\n */\nexport function roundNumber(num: number | string, scale = 0) {\n\tif (!num.toString().includes('e')) {\n\t\treturn Number(`${Math.round(Number(`${num}e+${scale}`))}e-${scale}`);\n\t}\n\tconst arr = `${num}`.split('e');\n\tlet sig = '';\n\n\tif (Number(arr[1]) + scale > 0) {\n\t\tsig = '+';\n\t}\n\n\treturn Number(`${Math.round(Number(`${Number(arr[0])}e${sig}${Number(arr[1]) + scale}`))}e-${scale}`);\n}\n","const TO_TITLE_CASE = /[A-Za-zÀ-ÖØ-öø-ÿ]\\S*/g;\n\n/**\n * The variants that will not strictly follow the `toTitleCase` algorithm\n * and will instead return the value matched with the key.\n *\n * This table lists how certain terms are converted.\n * Any terms not included are converted to regular `Titlecase`.\n * |       Term       |   Converted To   |\n * |:---------------- |:---------------- |\n * | textchannel      | TextChannel      |\n * | voicechannel     | VoiceChannel     |\n * | categorychannel  | CategoryChannel  |\n * | guildmember      | GuildMember      |\n */\nexport const baseVariants: Record<string, string> = {\n\ttextchannel: 'TextChannel',\n\tvoicechannel: 'VoiceChannel',\n\tcategorychannel: 'CategoryChannel',\n\tguildmember: 'GuildMember'\n};\n\n/**\n * Converts a string to Title Case\n *\n * @description This is designed to also ensure common Discord PascalCased strings\n * are put in their TitleCase {@link baseVariants}.\n *\n * You can also provide your own variants to merge with the {@link baseVariants} for\n * your own functionality use.\n *\n * @param str The string to title case\n * @param options The options to use when converting the string\n */\nexport function toTitleCase(str: string, options: ToTitleCaseOptions = {}): string {\n\tconst { additionalVariants = {}, caseSensitive } = options;\n\tconst titleCaseVariants = {\n\t\t...baseVariants,\n\t\t...(caseSensitive\n\t\t\t? additionalVariants\n\t\t\t: Object.entries(additionalVariants).reduce<Record<string, string>>(\n\t\t\t\t\t(variants, [key, variant]) => ({ ...variants, [key.toLowerCase()]: variant }),\n\t\t\t\t\t{}\n\t\t\t  ))\n\t};\n\n\treturn str.replace(\n\t\tTO_TITLE_CASE,\n\t\t(txt) => titleCaseVariants[caseSensitive ? txt : txt.toLowerCase()] ?? txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase()\n\t);\n}\n\n/**\n * The options to use when converting a string to title case\n */\nexport interface ToTitleCaseOptions {\n\t/**\n\t * The optional additional variants to use when converting the string\n\t */\n\tadditionalVariants?: Record<string, string>;\n\n\t/**\n\t * Whether to convert the string to title case in a case sensitive manner.\n\t */\n\tcaseSensitive?: boolean;\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n/**\n * Try parse a stringified JSON string.\n * @param value The value to parse\n */\nexport function tryParse(value: string): object | string {\n\ttry {\n\t\treturn JSON.parse(value);\n\t} catch (err) {\n\t\treturn value;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACKO,6BAAyD,MAAS,MAAkB;AAC1F,QAAI,SAAS;AAAM,aAAO;AAC1B,QAAI,KAAK,WAAW,KAAK;AAAQ,aAAO;AAExC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,UAAI,KAAK,OAAO,KAAK,MAAM,OAAO,KAAK,OAAO,OAAO,KAAK;AAAI,eAAO;AAAA,IACtE;AACA,WAAO;AAAA,EACR;AARgB;;ACIT,gBAAiB,OAAmB;AAC1C,WAAO;AAAA,EACR;AAFgB;;ACJT,iBAAkB,OAAqB,WAA0B;AACvE,QAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,YAAM,IAAI,UAAU,2BAA2B;AAC1E,QAAI,CAAC,OAAO,UAAU,SAAS;AAAG,YAAM,IAAI,UAAU,+BAA+B;AACrF,QAAI,YAAY;AAAG,YAAM,IAAI,WAAW,iCAAiC;AACzE,UAAM,QAAa,MAAM,MAAM;AAC/B,UAAM,SAAgB,CAAC;AACvB,WAAO,MAAM;AAAQ,aAAO,KAAK,MAAM,OAAO,GAAG,SAAS,CAAC;AAC3D,WAAO;AAAA,EACR;AARgB;;ACET,wBAAsC,OAAa,MAAqB;AAC9E,QAAI,OAAoB;AACxB,WAAO,SAAS,MAAM;AACrB,UAAI,SAAS;AAAM,eAAO;AAC1B,aAAO,OAAO,eAAe,IAAI;AAAA,IAClC;AAEA,WAAO;AAAA,EACR;AARgB;;ACPhB,MAAM,MAAM,OAAO,aAAa,IAAI;AAO7B,qBAAsB,UAAkB,YAAuB;AACrE,QAAI,OAAO,eAAe,UAAU;AACnC,UAAI,WAAW,WAAW;AAAG,eAAO,SAAS;AAC7C,aAAO,SAAS;AAAA,EAAa,WAAW,QAAQ,OAAO,KAAK,SAAS,EAAE,QAAQ,OAAO,KAAK,KAAK;AAAA,IACjG;AACA,WAAO,SAAS;AAAA,EAAa,cAAc;AAAA,EAC5C;AANgB;;ACPhB,AAQO,qBAAmB,KAAa,QAAgB,OAAO,KAAK;AAClE,UAAM,IAAI,IAAI,UAAU,GAAG,MAAM,EAAE,YAAY,IAAI;AACnD,UAAM,MAAM,MAAM,KAAK,SAAS;AAChC,WAAO,IAAI,UAAU,GAAG,GAAG;AAAA,EAC5B;AAJgB;;ACNhB,AAOO,mBAAiB,KAAa,QAAgB;AACpD,QAAI,IAAI,SAAS;AAAQ,aAAO;AAChC,UAAM,MAAM,UAAU,KAAK,SAAS,CAAC;AACrC,QAAI,IAAI,SAAS,SAAS;AAAG,aAAO,GAAG;AACvC,WAAO,GAAG,IAAI,MAAM,GAAG,SAAS,CAAC;AAAA,EAClC;AALgB;;AC0DT,oBACN,MACA,UAA4B,CAAC,GACkB;AAtEhD;AAuEC,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,iBAAiB;AAErB,UAAM,OAAO,cAAQ,SAAR,YAAgB;AAC7B,UAAM,UAAU,OAAO,QAAQ,YAAY,WAAW,KAAK,IAAI,QAAQ,SAAS,IAAI,IAAI;AAExF,wBAAoB,MAAc;AACjC,YAAM,OAAO;AAEb,iBAAW;AACX,uBAAiB;AACjB,eAAS,KAAK,GAAG,IAAK;AACtB,aAAO;AAAA,IACR;AAPS,AAST,yBAAqB,MAAc;AAElC,uBAAiB;AAEjB,gBAAU,WAAW,cAAc,IAAI;AAEvC,aAAO;AAAA,IACR;AAPS,AAST,2BAAuB,MAAc;AACpC,YAAM,oBAAoB,OAAO;AACjC,YAAM,sBAAsB,OAAO;AACnC,YAAM,UAAS,OAAO;AAEtB,aAAO,YAAY,OAAO,UAAS,KAAK,IAAI,SAAQ,UAAU,mBAAmB;AAAA,IAClF;AANS,AAQT,0BAAsB,MAAc;AACnC,YAAM,oBAAoB,OAAO;AACjC,YAAM,sBAAsB,OAAO;AAKnC,aACC,iBAAiB,UACjB,qBAAqB,QACrB,oBAAoB,KACnB,YAAY,QAAQ,uBAAuB;AAAA,IAE9C;AAbS,AAeT,4BAAwB;AACvB,YAAM,OAAO,KAAK,IAAI;AACtB,UAAI,aAAa,IAAI,GAAG;AACvB,qBAAa,IAAI;AACjB;AAAA,MACD;AAEA,gBAAU,WAAW,cAAc,cAAc,IAAI,CAAC;AAAA,IACvD;AARS,AAUT,0BAAsB,MAAc;AACnC,gBAAU;AACV,aAAO,WAAW,IAAI;AAAA,IACvB;AAHS,AAKT,sBAAkB;AACjB,UAAI,YAAY,QAAW;AAC1B,qBAAa,OAAO;AAAA,MACrB;AAEA,uBAAiB;AACjB,iBAAW;AACX,qBAAe;AACf,gBAAU;AAAA,IACX;AATS,AAWT,qBAAiB;AAChB,aAAO,YAAY,SAAY,SAAS,aAAa,KAAK,IAAI,CAAC;AAAA,IAChE;AAFS,AAIT,0BAAsB,MAAuB;AAC5C,YAAM,OAAO,KAAK,IAAI;AACtB,YAAM,aAAa,aAAa,IAAI;AAEpC,iBAAW;AACX,qBAAe;AAEf,UAAI,YAAY;AACf,YAAI,YAAY,QAAW;AAC1B,iBAAO,YAAY,YAAY;AAAA,QAChC;AACA,YAAI,YAAY,MAAM;AAErB,oBAAU,WAAW,cAAc,IAAI;AACvC,iBAAO,WAAW,YAAY;AAAA,QAC/B;AAAA,MACD;AAEA,UAAI,YAAY,QAAW;AAC1B,kBAAU,WAAW,cAAc,IAAI;AAAA,MACxC;AAEA,aAAO;AAAA,IACR;AAvBS,AAyBT,cAAU,SAAS;AACnB,cAAU,QAAQ;AAElB,WAAO;AAAA,EACR;AAjHgB;;ACnEhB,MAAM,iBAAiB,CAAC,UAAU,UAAU,UAAU,SAAS;AAMxD,uBAAqB,OAA6D;AACxF,WAAO,eAAe,SAAS,OAAO,KAAK;AAAA,EAC5C;AAFgB;;ACAT,qBAAsB,QAAc;AAE1C,QAAI,WAAW,QAAQ,YAAY,MAAM,GAAG;AAC3C,aAAO;AAAA,IACR;AAEA,QAAI,kBAAkB,MAAM;AAC3B,YAAM,SAAS,IAAK,OAAO,YAAgC,MAAM;AAEjE,aAAO;AAAA,IACR;AAEA,QAAI,MAAM,QAAQ,MAAM,GAAG;AAC1B,YAAM,SAAS,IAAK,OAAO,YAAiC,OAAO,MAAM;AAEzE,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,eAAO,KAAK,UAAU,OAAO,EAAE;AAAA,MAChC;AAEA,aAAO;AAAA,IACR;AAEA,QAAI,kBAAkB,KAAK;AAC1B,YAAM,SAAS,IAAK,OAAO,YAA+B;AAE1D,iBAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,GAAG;AAC5C,eAAO,IAAI,KAAK,UAAU,KAAK,CAAC;AAAA,MACjC;AAEA,aAAO;AAAA,IACR;AAEA,QAAI,kBAAkB,KAAK;AAC1B,YAAM,SAAS,IAAK,OAAO,YAA+B;AAE1D,iBAAW,SAAS,OAAO,OAAO,GAAG;AACpC,eAAO,IAAI,UAAU,KAAK,CAAC;AAAA,MAC5B;AAEA,aAAO;AAAA,IACR;AAEA,QAAI,OAAO,WAAW,UAAU;AAC/B,YAAM,SAAS,IAAM,OAAuD,YAAkC;AAK9G,iBAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,MAAM,GAAG;AAClD,eAAO,eAAe,QAAQ,KAAK;AAAA,UAClC,cAAc;AAAA,UACd,YAAY;AAAA,UACZ,OAAO,UAAU,KAAK;AAAA,UACtB,UAAU;AAAA,QACX,CAAC;AAAA,MACF;AAEA,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AA7DgB;;ACAT,6BAA2B,OAAkC;AACnE,WAAO,UAAU,UAAa,UAAU;AAAA,EACzC;AAFgB;;ACYT,kCAAwC,OAA0C;AACxF,WAAO,CAAC,kBAAkB,KAAK;AAAA,EAChC;AAFgB;;ACXT,oCAAkC,OAAuC;AAC/E,WAAO,kBAAkB,KAAK,KAAM,MAA6B,WAAW;AAAA,EAC7E;AAFgB;;ACWT,0CAAgD,OAA+C;AACrG,WAAO,CAAC,yBAAyB,KAAK;AAAA,EACvC;AAFgB;;ACXT,mCAAiC,OAAsC;AAC7E,WAAO,UAAU,KAAK,kBAAkB,KAAK;AAAA,EAC9C;AAFgB;;ACWT,yCAA+C,OAA8C;AACnG,WAAO,CAAC,wBAAwB,KAAK;AAAA,EACtC;AAFgB;;ACZT,iCAAkC,KAA0B,MAA6B;AAC/F,WAAO,KAAK,KAAK,CAAC,QAAQ,IAAI,IAAI,GAAG,CAAC;AAAA,EACvC;AAFgB;;ACNhB,MAAM,OAAM,OAAO,aAAa,IAAI;AAM7B,2BAAyB,OAAuB;AACtD,WAAO,KAAK,MAAM,QAAQ,MAAM,MAAQ,EAAE,QAAQ,MAAM,KAAK,MAAK;AAAA,EACnE;AAFgB;;ACAT,mBAAiB,OAA+B;AACtD,WAAO,OAAO,UAAU,cAAc,OAAO,MAAM,cAAc;AAAA,EAClE;AAFgB;;ACDT,sBAAoB,OAAmC;AAC7D,WAAO,OAAO,UAAU;AAAA,EACzB;AAFgB;;ACDT,oBAAkB,OAAiC;AACzD,WAAO,OAAO,UAAU,YAAY,CAAC,MAAM,KAAK,KAAK,OAAO,SAAS,KAAK;AAAA,EAC3E;AAFgB;;ACKT,oBAAsE,OAAgB,iBAA6C;AACzI,WAAO,OAAO,UAAU,YAAY,QAAQ,MAAM,gBAAiB,6CAAmB,UAAU;AAAA,EACjG;AAFgB;;ACDhB,mBAAiB,OAAqC;AACrD,WAAO,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,MAAM,IAAI;AAAA,EAC3D;AAFS,AAIT,oBAAkB,OAAsC;AACvD,WAAO,QAAQ,IAAI,OAAO,OAAO,KAAK,WAAW,MAAM,KAAK;AAAA,EAC7D;AAFS,AAQF,sBAAoB,OAAmC;AAC7D,QAAI,OAAO,UAAU,YAAY,UAAU;AAAM,aAAO;AACxD,WAAO,iBAAiB,WAAY,UAAU,QAAQ,aAAa,QAAQ,KAAK,KAAK,SAAS,KAAK;AAAA,EACpG;AAHgB;;ACdT,sBAAoB,MAAc,OAAgB,MAA+B,CAAC,GAA4B;AACpH,QAAI,KAAK,SAAS,GAAG,GAAG;AACvB,YAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,YAAM,UAAU,MAAM,IAAI;AAC1B,UAAI,YAAY;AAChB,iBAAW,OAAO,OAAO;AACxB,YAAI,CAAC,UAAU;AAAM,oBAAU,OAAO,CAAC;AACvC,oBAAY,UAAU;AAAA,MACvB;AACA,gBAAU,WAAW;AAAA,IACtB,OAAO;AACN,UAAI,QAAQ;AAAA,IACb;AACA,WAAO;AAAA,EACR;AAdgB;;ACoCT,wBAAqE,MAAS,YAAqC;AAEzH,QAAI,CAAC;AAAY,aAAO,UAAU,IAAI;AAEtC,eAAW,CAAC,SAAS,cAAc,OAAO,QAAQ,IAAI,GAAG;AACxD,YAAM,2BAA2B,QAAQ,IAAI,YAAY,OAAO;AAEhE,UAAI,OAAO,6BAA6B,aAAa;AACpD,gBAAQ,IAAI,YAAY,SAAS,UAAU,SAAS,CAAC;AAAA,MACtD,WAAW,SAAS,wBAAwB,GAAG;AAC9C,gBAAQ,IAAI,YAAY,SAAS,aAAc,gCAAa,CAAC,GAAqB,wBAAwB,CAAC;AAAA,MAC5G;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAfgB;;AClCT,wBAA0D,WAAc,WAA+B;AAC7G,eAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,SAAS,GAAG;AACrD,YAAM,cAAc,QAAQ,IAAI,WAAW,GAAG;AAC9C,UAAI,SAAS,KAAK,GAAG;AACpB,gBAAQ,IAAI,WAAW,KAAK,SAAS,WAAW,IAAI,aAAa,aAAa,KAAe,IAAI,KAAK;AAAA,MACvG,WAAW,CAAC,SAAS,WAAW,GAAG;AAClC,gBAAQ,IAAI,WAAW,KAAK,KAAK;AAAA,MAClC;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAXgB;;ACPT,kBAAgB;AAAA,EAAC;AAAR;;ACMT,0BAAwB,UAAmC,SAAS,IAAyB;AACnG,UAAM,UAA+B,CAAC;AACtC,eAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,QAAQ,GAAG;AACpD,UAAI,SAAS,KAAK,GAAG;AACpB,gBAAQ,KAAK,GAAG,eAAe,OAAkC,GAAG,SAAS,MAAM,CAAC;AAAA,MACrF,OAAO;AACN,gBAAQ,KAAK,CAAC,GAAG,SAAS,OAAO,KAAK,CAAC;AAAA,MACxC;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAXgB;;ACDT,oBAAkB,KAAyB;AACjD,QAAI;AAEH,aAAO,IAAI,IAAI,GAAG;AAAA,IACnB,QAAE;AACD,aAAO;AAAA,IACR;AAAA,EACD;AAPgB;;ACKT,qBAAsB,OAAY,WAAiD;AACzF,QAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,YAAM,IAAI,UAAU,2BAA2B;AAC1E,QAAI,CAAC,WAAW,SAAS;AAAG,YAAM,IAAI,UAAU,6DAA6D;AAE7G,UAAM,eAAoB,CAAC;AAC3B,UAAM,eAAoB,CAAC;AAE3B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,UAAI,UAAU,MAAM,IAAI,CAAC,GAAG;AAC3B,qBAAa,KAAK,MAAM,EAAE;AAAA,MAC3B,OAAO;AACN,qBAAa,KAAK,MAAM,EAAE;AAAA,MAC3B;AAAA,IACD;AAEA,WAAO,CAAC,cAAc,YAAY;AAAA,EACnC;AAhBgB;;ACLT,iBAAe,KAAa,KAAa,MAAwB;AACvE,WAAO,IAAI,MAAM,KAAK,MAAO,OAAM,OAAO,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,MAAM,MAAM,IAAI,IAAI;AAAA,EAC7F;AAFgB;;ACLhB,MAAM,YAAY;AAMX,qBAAmB,KAAqB;AAC9C,WAAO,IAAI,QAAQ,WAAW,MAAM;AAAA,EACrC;AAFgB;;ACDT,uBAAqB,KAAsB,QAAQ,GAAG;AAC5D,QAAI,CAAC,IAAI,SAAS,EAAE,SAAS,GAAG,GAAG;AAClC,aAAO,OAAO,GAAG,KAAK,MAAM,OAAO,GAAG,QAAQ,OAAO,CAAC,MAAM,OAAO;AAAA,IACpE;AACA,UAAM,MAAM,GAAG,MAAM,MAAM,GAAG;AAC9B,QAAI,MAAM;AAEV,QAAI,OAAO,IAAI,EAAE,IAAI,QAAQ,GAAG;AAC/B,YAAM;AAAA,IACP;AAEA,WAAO,OAAO,GAAG,KAAK,MAAM,OAAO,GAAG,OAAO,IAAI,EAAE,KAAK,MAAM,OAAO,IAAI,EAAE,IAAI,OAAO,CAAC,MAAM,OAAO;AAAA,EACrG;AAZgB;;ACNhB,MAAM,gBAAgB;AAef,MAAM,eAAuC;AAAA,IACnD,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,aAAa;AAAA,EACd;AAcO,uBAAqB,KAAa,UAA8B,CAAC,GAAW;AAClF,UAAM,EAAE,qBAAqB,CAAC,GAAG,kBAAkB;AACnD,UAAM,oBAAoB;AAAA,SACtB;AAAA,SACC,gBACD,qBACA,OAAO,QAAQ,kBAAkB,EAAE,OACnC,CAAC,UAAU,CAAC,KAAK,aAAc,MAAK,WAAW,IAAI,YAAY,IAAI,QAAQ,IAC3E,CAAC,CACD;AAAA,IACJ;AAEA,WAAO,IAAI,QACV,eACA,CAAC,QAAK;AAhDR;AAgDW,qCAAkB,gBAAgB,MAAM,IAAI,YAAY,OAAxD,YAA8D,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,UAAU,CAAC,EAAE,YAAY;AAAA,KACnI;AAAA,EACD;AAhBgB;;AC7BT,oBAAkB,OAAgC;AACxD,QAAI;AACH,aAAO,KAAK,MAAM,KAAK;AAAA,IACxB,SAAS,KAAP;AACD,aAAO;AAAA,IACR;AAAA,EACD;AANgB","names":[]}