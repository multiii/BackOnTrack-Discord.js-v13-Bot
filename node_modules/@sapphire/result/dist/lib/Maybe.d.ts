import type { None, Some } from './Lexure';
/**
 * A type used to express a value that may or may not exist.
 * @typeparam T The value's type.
 */
export declare type Maybe<T> = Some<T> | None;
/**
 * Returns the maybe itself.
 * @param value The value to convert.
 */
export declare function maybe<T, V extends Maybe<T>>(value: V): V;
/**
 * Creates a {@link None} from an existing {@link None} or a `null`.
 * @param value The value to convert.
 */
export declare function maybe(value: null | None): None;
/**
 * Creates a {@link Some} from a non-null value or an existing {@link Some}, or a {@link None} otherwise.
 * @param value The value to convert.
 */
export declare function maybe<T>(value: T | Maybe<T> | null): Maybe<T>;
/**
 * Creates a {@link Some} from a non-null value or an existing {@link Some}.
 * @param value The value to convert.
 */
export declare function maybe<T>(value: T | Some<T>): Some<T>;
/**
 * Creates a None with no value.
 * @return An existing Maybe.
 */
export declare function some(): Some<unknown>;
/**
 * Creates a None with a value.
 * @typeparam T The value's type.
 * @param x Value to use.
 * @return An existing Maybe.
 */
export declare function some<T>(x: T): Some<T>;
/**
 * Creates a None value.
 * @return A non-existing Maybe.
 */
export declare function none(): None;
/**
 * Determines whether or not a Maybe is a Some.
 * @typeparam T The value's type.
 */
export declare function isSome<T>(x: Maybe<T>): x is Some<T>;
/**
 * Determines whether or not a Maybe is a None.
 * @typeparam T The value's type.
 */
export declare function isNone<T>(x: Maybe<T>): x is None;
/**
 * Type-safe helper to preserve the type parameter's type.
 * @param x The value to check.
 */
export declare function isMaybe<T>(x: Maybe<T>): true;
/**
 * Determines whether or not an arbitrary value is a Maybe.
 * @param x The value to check.
 */
export declare function isMaybe<T>(x: unknown): x is Maybe<T>;
export declare type UnwrapMaybeValue<T extends Maybe<unknown>> = T extends Some<infer V> ? V : never;
//# sourceMappingURL=Maybe.d.ts.map