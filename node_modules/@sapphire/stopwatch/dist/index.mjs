var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/index.ts
import { performance } from "node:perf_hooks";
var _start, _end;
var Stopwatch = class {
  constructor(digits = 2) {
    __publicField(this, "digits");
    __privateAdd(this, _start, void 0);
    __privateAdd(this, _end, void 0);
    this.digits = digits;
    __privateSet(this, _start, performance.now());
    __privateSet(this, _end, null);
  }
  get duration() {
    return __privateGet(this, _end) ? __privateGet(this, _end) - __privateGet(this, _start) : performance.now() - __privateGet(this, _start);
  }
  get running() {
    return Boolean(!__privateGet(this, _end));
  }
  restart() {
    __privateSet(this, _start, performance.now());
    __privateSet(this, _end, null);
    return this;
  }
  reset() {
    __privateSet(this, _start, performance.now());
    __privateSet(this, _end, __privateGet(this, _start));
    return this;
  }
  start() {
    if (!this.running) {
      __privateSet(this, _start, performance.now() - this.duration);
      __privateSet(this, _end, null);
    }
    return this;
  }
  stop() {
    if (this.running)
      __privateSet(this, _end, performance.now());
    return this;
  }
  toString() {
    const time = this.duration;
    if (time >= 1e3)
      return `${(time / 1e3).toFixed(this.digits)}s`;
    if (time >= 1)
      return `${time.toFixed(this.digits)}ms`;
    return `${(time * 1e3).toFixed(this.digits)}\u03BCs`;
  }
};
_start = new WeakMap();
_end = new WeakMap();
export {
  Stopwatch
};
//# sourceMappingURL=index.mjs.map