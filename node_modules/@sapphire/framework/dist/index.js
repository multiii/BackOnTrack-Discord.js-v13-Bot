/* Version: 3.0.0-next.b7485a2.0 - May 29, 2022 12:52:09 */
'use strict';

Object.defineProperty(exports, "__esModule", { value: true });
exports.version = exports.CorePreconditions = exports.ApplicationCommandRegistries = exports.ApplicationCommandRegistry = exports.Resolvers = exports.StoreRegistry = exports.Store = exports.Piece = exports.MissingExportsError = exports.LoaderError = exports.container = exports.AliasStore = exports.AliasPiece = void 0;
const tslib_1 = require("tslib");
const ApplicationCommandRegistries_1 = require("./lib/utils/application-commands/ApplicationCommandRegistries");
const ClientPermissions_1 = require("./preconditions/ClientPermissions");
const Cooldown_1 = require("./preconditions/Cooldown");
const DMOnly_1 = require("./preconditions/DMOnly");
const Enabled_1 = require("./preconditions/Enabled");
const GuildNewsOnly_1 = require("./preconditions/GuildNewsOnly");
const GuildNewsThreadOnly_1 = require("./preconditions/GuildNewsThreadOnly");
const GuildOnly_1 = require("./preconditions/GuildOnly");
const GuildPrivateThreadOnly_1 = require("./preconditions/GuildPrivateThreadOnly");
const GuildPublicThreadOnly_1 = require("./preconditions/GuildPublicThreadOnly");
const GuildTextOnly_1 = require("./preconditions/GuildTextOnly");
const GuildThreadOnly_1 = require("./preconditions/GuildThreadOnly");
const NSFW_1 = require("./preconditions/NSFW");
const UserPermissions_1 = require("./preconditions/UserPermissions");
const ApplicationCommandRegistries = {
    acquire: ApplicationCommandRegistries_1.acquire,
    setDefaultBehaviorWhenNotIdentical: ApplicationCommandRegistries_1.setDefaultBehaviorWhenNotIdentical,
    getDefaultBehaviorWhenNotIdentical: ApplicationCommandRegistries_1.getDefaultBehaviorWhenNotIdentical,
    get registries() {
        return ApplicationCommandRegistries_1.registries;
    }
};
exports.ApplicationCommandRegistries = ApplicationCommandRegistries;
var pieces_1 = require("@sapphire/pieces");
Object.defineProperty(exports, "AliasPiece", { enumerable: true, get: function () { return pieces_1.AliasPiece; } });
Object.defineProperty(exports, "AliasStore", { enumerable: true, get: function () { return pieces_1.AliasStore; } });
Object.defineProperty(exports, "container", { enumerable: true, get: function () { return pieces_1.container; } });
Object.defineProperty(exports, "LoaderError", { enumerable: true, get: function () { return pieces_1.LoaderError; } });
Object.defineProperty(exports, "MissingExportsError", { enumerable: true, get: function () { return pieces_1.MissingExportsError; } });
Object.defineProperty(exports, "Piece", { enumerable: true, get: function () { return pieces_1.Piece; } });
Object.defineProperty(exports, "Store", { enumerable: true, get: function () { return pieces_1.Store; } });
Object.defineProperty(exports, "StoreRegistry", { enumerable: true, get: function () { return pieces_1.StoreRegistry; } });
tslib_1.__exportStar(require("@sapphire/result"), exports);
tslib_1.__exportStar(require("./lib/errors/ArgumentError"), exports);
tslib_1.__exportStar(require("./lib/errors/Identifiers"), exports);
tslib_1.__exportStar(require("./lib/errors/PreconditionError"), exports);
tslib_1.__exportStar(require("./lib/errors/UserError"), exports);
tslib_1.__exportStar(require("./lib/parsers/Args"), exports);
tslib_1.__exportStar(require("./lib/plugins/Plugin"), exports);
tslib_1.__exportStar(require("./lib/plugins/PluginManager"), exports);
tslib_1.__exportStar(require("./lib/plugins/symbols"), exports);
exports.Resolvers = tslib_1.__importStar(require("./lib/resolvers"));
tslib_1.__exportStar(require("./lib/SapphireClient"), exports);
tslib_1.__exportStar(require("./lib/structures/Argument"), exports);
tslib_1.__exportStar(require("./lib/structures/ArgumentStore"), exports);
tslib_1.__exportStar(require("./lib/structures/Command"), exports);
tslib_1.__exportStar(require("./lib/structures/CommandStore"), exports);
tslib_1.__exportStar(require("./lib/structures/ExtendedArgument"), exports);
tslib_1.__exportStar(require("./lib/structures/InteractionHandler"), exports);
tslib_1.__exportStar(require("./lib/structures/InteractionHandlerStore"), exports);
tslib_1.__exportStar(require("./lib/structures/Listener"), exports);
tslib_1.__exportStar(require("./lib/structures/ListenerStore"), exports);
tslib_1.__exportStar(require("./lib/structures/Precondition"), exports);
tslib_1.__exportStar(require("./lib/structures/PreconditionStore"), exports);
tslib_1.__exportStar(require("./lib/types/Enums"), exports);
tslib_1.__exportStar(require("./lib/types/Events"), exports);
var ApplicationCommandRegistry_1 = require("./lib/utils/application-commands/ApplicationCommandRegistry");
Object.defineProperty(exports, "ApplicationCommandRegistry", { enumerable: true, get: function () { return ApplicationCommandRegistry_1.ApplicationCommandRegistry; } });
tslib_1.__exportStar(require("./lib/utils/logger/ILogger"), exports);
tslib_1.__exportStar(require("./lib/utils/logger/Logger"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/conditions/IPreconditionCondition"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/conditions/PreconditionConditionAnd"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/conditions/PreconditionConditionOr"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/containers/ClientPermissionsPrecondition"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/containers/UserPermissionsPrecondition"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/IPreconditionContainer"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/PreconditionContainerArray"), exports);
tslib_1.__exportStar(require("./lib/utils/preconditions/PreconditionContainerSingle"), exports);
exports.CorePreconditions = {
    ClientPermissions: ClientPermissions_1.CorePrecondition,
    Cooldown: Cooldown_1.CorePrecondition,
    DMOnly: DMOnly_1.CorePrecondition,
    Enabled: Enabled_1.CorePrecondition,
    GuildNewsOnly: GuildNewsOnly_1.CorePrecondition,
    GuildNewsThreadOnly: GuildNewsThreadOnly_1.CorePrecondition,
    GuildOnly: GuildOnly_1.CorePrecondition,
    GuildPrivateThreadOnly: GuildPrivateThreadOnly_1.CorePrecondition,
    GuildPublicThreadOnly: GuildPublicThreadOnly_1.CorePrecondition,
    GuildTextOnly: GuildTextOnly_1.CorePrecondition,
    GuildThreadOnly: GuildThreadOnly_1.CorePrecondition,
    NSFW: NSFW_1.CorePrecondition,
    UserPermissions: UserPermissions_1.CorePrecondition
};
/**
 * The [@sapphire/framework](https://github.com/sapphiredev/framework) version that you are currently using.
 * An example use of this is showing it of in a bot information command.
 *
 * Note to Sapphire developers: This needs to explicitly be `string` so it is not typed as the string that gets replaced by Rollup
 */
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
exports.version = '3.0.0-next.b7485a2.0';
