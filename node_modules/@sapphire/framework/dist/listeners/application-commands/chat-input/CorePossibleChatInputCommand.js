"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreListener = void 0;
const Listener_1 = require("../../../lib/structures/Listener");
const Events_1 = require("../../../lib/types/Events");
class CoreListener extends Listener_1.Listener {
    constructor(context) {
        super(context, { event: Events_1.Events.PossibleChatInputCommand });
    }
    run(interaction) {
        const { client, stores } = this.container;
        const commandStore = stores.get('commands');
        const command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);
        if (!command) {
            client.emit(Events_1.Events.UnknownChatInputCommand, {
                interaction,
                context: { commandId: interaction.commandId, commandName: interaction.commandName }
            });
            return;
        }
        if (!command.chatInputRun) {
            client.emit(Events_1.Events.CommandDoesNotHaveChatInputCommandHandler, {
                command,
                interaction,
                context: { commandId: interaction.commandId, commandName: interaction.commandName }
            });
            return;
        }
        client.emit(Events_1.Events.PreChatInputCommandRun, {
            command: command,
            context: { commandId: interaction.commandId, commandName: interaction.commandName },
            interaction
        });
    }
}
exports.CoreListener = CoreListener;
//# sourceMappingURL=CorePossibleChatInputCommand.js.map