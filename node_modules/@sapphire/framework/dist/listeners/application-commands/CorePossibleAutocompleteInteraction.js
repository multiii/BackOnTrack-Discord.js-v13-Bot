"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreListener = void 0;
const Listener_1 = require("../../lib/structures/Listener");
const Events_1 = require("../../lib/types/Events");
class CoreListener extends Listener_1.Listener {
    constructor(context) {
        super(context, { event: Events_1.Events.PossibleAutocompleteInteraction });
    }
    async run(interaction) {
        const { stores } = this.container;
        const commandStore = stores.get('commands');
        // Try resolving in command
        const command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);
        if (command?.autocompleteRun) {
            try {
                await command.autocompleteRun(interaction);
                this.container.client.emit(Events_1.Events.CommandAutocompleteInteractionSuccess, {
                    command: command,
                    context: { commandId: interaction.commandId, commandName: interaction.commandName },
                    interaction
                });
            }
            catch (err) {
                this.container.client.emit(Events_1.Events.CommandAutocompleteInteractionError, err, {
                    command: command,
                    context: { commandId: interaction.commandId, commandName: interaction.commandName },
                    interaction
                });
            }
            return;
        }
        // Unless we ran a command handler, always call interaction handlers with the interaction
        await this.container.stores.get('interaction-handlers').run(interaction);
    }
}
exports.CoreListener = CoreListener;
//# sourceMappingURL=CorePossibleAutocompleteInteraction.js.map