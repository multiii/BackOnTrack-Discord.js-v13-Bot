"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandStore = void 0;
const pieces_1 = require("@sapphire/pieces");
const ApplicationCommandRegistries_1 = require("../utils/application-commands/ApplicationCommandRegistries");
const getNeededParameters_1 = require("../utils/application-commands/getNeededParameters");
const Command_1 = require("./Command");
/**
 * Stores all Command pieces
 * @since 1.0.0
 */
class CommandStore extends pieces_1.AliasStore {
    constructor() {
        super(Command_1.Command, { name: 'commands' });
    }
    /**
     * Get all the command categories.
     */
    get categories() {
        const categories = new Set(this.map((command) => command.category));
        categories.delete(null);
        return [...categories];
    }
    unload(name) {
        const piece = this.resolve(name);
        // Remove the aliases from the store
        for (const nameOrId of piece.applicationCommandRegistry.chatInputCommands) {
            const aliasedPiece = this.aliases.get(nameOrId);
            if (aliasedPiece === piece) {
                this.aliases.delete(nameOrId);
            }
        }
        for (const nameOrId of piece.applicationCommandRegistry.contextMenuCommands) {
            const aliasedPiece = this.aliases.get(nameOrId);
            if (aliasedPiece === piece) {
                this.aliases.delete(nameOrId);
            }
        }
        // Remove the registry from the application command registries
        ApplicationCommandRegistries_1.registries.delete(piece.name);
        return super.unload(name);
    }
    async loadAll() {
        await super.loadAll();
        // If we don't have an application, that means this was called on login...
        if (!this.container.client.application)
            return;
        const { applicationCommands, globalCommands, guildCommands } = await (0, getNeededParameters_1.getNeededRegistryParameters)();
        for (const command of this.values()) {
            // eslint-disable-next-line @typescript-eslint/dot-notation
            await command.applicationCommandRegistry['runAPICalls'](applicationCommands, globalCommands, guildCommands);
            // Reinitialize the aliases
            for (const nameOrId of command.applicationCommandRegistry.chatInputCommands) {
                this.aliases.set(nameOrId, command);
            }
            for (const nameOrId of command.applicationCommandRegistry.contextMenuCommands) {
                this.aliases.set(nameOrId, command);
            }
        }
    }
}
exports.CommandStore = CommandStore;
//# sourceMappingURL=CommandStore.js.map