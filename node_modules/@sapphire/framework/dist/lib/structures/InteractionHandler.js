"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionHandlerTypes = exports.InteractionHandler = void 0;
const pieces_1 = require("@sapphire/pieces");
const result_1 = require("@sapphire/result");
class InteractionHandler extends pieces_1.Piece {
    constructor(context, options) {
        super(context, options);
        this.interactionHandlerType = options.interactionHandlerType;
    }
    /**
     * A custom function that will be called when checking if an interaction should be passed to this handler.
     * You can use this method to not only filter by ids, but also pre-parse the data from the id for use in the run method.
     *
     * By default, all interactions of the type you specified will run in a handler. You should override this method
     * to change that behavior.
     *
     * @example
     * ```typescript
     * // Parsing a button handler
     * public override parse(interaction: ButtonInteraction) {
     *   if (interaction.customId.startsWith('my-awesome-clicky-button')) {
     * 	   // Returning a `some` here means that the run method should be called next!
     *     return this.some({ isMyBotAwesome: true, awesomenessLevel: 9001 });
     *   }
     *
     *   // Returning a `none` means this interaction shouldn't run in this handler
     *   return this.none();
     * }
     * ```
     *
     * @example
     * ```typescript
     * // Getting data from a database based on the custom id
     * public override async parse(interaction: ButtonInteraction) {
     *   // This code is purely for demonstration purposes only!
     *   if (interaction.customId.startsWith('example-data')) {
     *     const [, userId, channelId] = interaction.customId.split('.');
     *
     * 	   const dataFromDatabase = await container.prisma.exampleData.findFirst({ where: { userId, channelId } });
     *
     *     // Returning a `some` here means that the run method should be called next!
     *     return this.some(dataFromDatabase);
     *   }
     *
     *   // Returning a `none` means this interaction shouldn't run in this handler
     *   return this.none();
     * }
     * ```
     *
     * @returns A {@link Maybe} (or a {@link Promise Promised} {@link Maybe}) that indicates if this interaction should be
     * handled by this handler, and any extra data that should be passed to the {@link InteractionHandler.run run method}
     */
    parse(_interaction) {
        return this.some();
    }
    some(data) {
        return (0, result_1.some)(data);
    }
    none() {
        return (0, result_1.none)();
    }
    toJSON() {
        return {
            ...super.toJSON(),
            interactionHandlerType: this.interactionHandlerType
        };
    }
}
exports.InteractionHandler = InteractionHandler;
var InteractionHandlerTypes;
(function (InteractionHandlerTypes) {
    // Specifically focused types
    InteractionHandlerTypes["Button"] = "BUTTON";
    InteractionHandlerTypes["SelectMenu"] = "SELECT_MENU";
    InteractionHandlerTypes["ModalSubmit"] = "MODAL_SUBMIT";
    // More free-falling handlers, for 1 shared handler between buttons and select menus (someone will have a use for this >,>)
    InteractionHandlerTypes["MessageComponent"] = "MESSAGE_COMPONENT";
    // Optional autocompletes, you can use this or in-command
    InteractionHandlerTypes["Autocomplete"] = "AUTOCOMPLETE";
})(InteractionHandlerTypes = exports.InteractionHandlerTypes || (exports.InteractionHandlerTypes = {}));
//# sourceMappingURL=InteractionHandler.js.map