"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreconditionStore = void 0;
const pieces_1 = require("@sapphire/pieces");
const result_1 = require("@sapphire/result");
require("../errors/Identifiers");
const Precondition_1 = require("./Precondition");
class PreconditionStore extends pieces_1.Store {
    constructor() {
        super(Precondition_1.Precondition, { name: 'preconditions' });
        this.globalPreconditions = [];
    }
    async messageRun(message, command, context = {}) {
        for (const precondition of this.globalPreconditions) {
            const result = precondition.messageRun
                ? await precondition.messageRun(message, command, context)
                : await precondition.error({
                    identifier: "preconditionMissingMessageHandler" /* Identifiers.PreconditionMissingMessageHandler */,
                    message: `The precondition "${precondition.name}" is missing a "messageRun" handler, but it was requested for the "${command.name}" command.`
                });
            if (!result.success)
                return result;
        }
        return (0, result_1.ok)();
    }
    async chatInputRun(interaction, command, context = {}) {
        for (const precondition of this.globalPreconditions) {
            const result = precondition.chatInputRun
                ? await precondition.chatInputRun(interaction, command, context)
                : await precondition.error({
                    identifier: "preconditionMissingChatInputHandler" /* Identifiers.PreconditionMissingChatInputHandler */,
                    message: `The precondition "${precondition.name}" is missing a "chatInputRun" handler, but it was requested for the "${command.name}" command.`
                });
            if (!result.success)
                return result;
        }
        return (0, result_1.ok)();
    }
    async contextMenuRun(interaction, command, context = {}) {
        for (const precondition of this.globalPreconditions) {
            const result = precondition.contextMenuRun
                ? await precondition.contextMenuRun(interaction, command, context)
                : await precondition.error({
                    identifier: "preconditionMissingContextMenuHandler" /* Identifiers.PreconditionMissingContextMenuHandler */,
                    message: `The precondition "${precondition.name}" is missing a "contextMenuRun" handler, but it was requested for the "${command.name}" command.`
                });
            if (!result.success)
                return result;
        }
        return (0, result_1.ok)();
    }
    set(key, value) {
        if (value.position !== null) {
            const index = this.globalPreconditions.findIndex((precondition) => precondition.position >= value.position);
            // If a precondition with lower priority wasn't found, push to the end of the array
            if (index === -1)
                this.globalPreconditions.push(value);
            else
                this.globalPreconditions.splice(index, 0, value);
        }
        return super.set(key, value);
    }
    delete(key) {
        const index = this.globalPreconditions.findIndex((precondition) => precondition.name === key);
        // If the precondition was found, remove it
        if (index !== -1)
            this.globalPreconditions.splice(index, 1);
        return super.delete(key);
    }
    clear() {
        this.globalPreconditions.length = 0;
        return super.clear();
    }
}
exports.PreconditionStore = PreconditionStore;
//# sourceMappingURL=PreconditionStore.js.map