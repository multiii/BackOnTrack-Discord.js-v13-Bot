"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandPreConditions = exports.CommandOptionsRunTypeEnum = exports.Command = void 0;
const tslib_1 = require("tslib");
const pieces_1 = require("@sapphire/pieces");
const utilities_1 = require("@sapphire/utilities");
const discord_js_1 = require("discord.js");
const Lexure = tslib_1.__importStar(require("lexure"));
const Args_1 = require("../parsers/Args");
require("../types/Enums");
const PreconditionContainerArray_1 = require("../utils/preconditions/PreconditionContainerArray");
const FlagUnorderedStrategy_1 = require("../utils/strategies/FlagUnorderedStrategy");
class Command extends pieces_1.AliasPiece {
    /**
     * @since 1.0.0
     * @param context The context.
     * @param options Optional Command settings.
     */
    constructor(context, options = {}) {
        super(context, { ...options, name: (options.name ?? context.name).toLowerCase() });
        /**
         * The lexer to be used for command parsing
         * @since 1.0.0
         * @private
         */
        this.lexer = new Lexure.Lexer();
        this.description = options.description ?? '';
        this.detailedDescription = options.detailedDescription ?? '';
        this.strategy = new FlagUnorderedStrategy_1.FlagUnorderedStrategy(options);
        this.fullCategory = options.fullCategory ?? this.location.directories;
        this.typing = options.typing ?? true;
        this.lexer.setQuotes(options.quotes ?? [
            ['"', '"'],
            ['“', '”'],
            ['「', '」'] // Corner brackets (CJK)
        ]);
        if (options.generateDashLessAliases) {
            const dashLessAliases = [];
            if (this.name.includes('-'))
                dashLessAliases.push(this.name.replace(/-/g, ''));
            for (const alias of this.aliases)
                if (alias.includes('-'))
                    dashLessAliases.push(alias.replace(/-/g, ''));
            this.aliases = [...this.aliases, ...dashLessAliases];
        }
        this.preconditions = new PreconditionContainerArray_1.PreconditionContainerArray(options.preconditions);
        this.parseConstructorPreConditions(options);
        const run = Reflect.get(this, 'run');
        if (typeof run === 'function' && !Reflect.has(this, 'messageRun')) {
            process.emitWarning('The "run" method in commands is deprecated.', {
                type: 'DeprecationWarning',
                code: 'CHAT_INPUT_COMMAND_MIGRATION_PREPARATION',
                detail: `Use "messageRun" instead (seen in "${this.name}", at "${this.location.full}")`
            });
            Reflect.set(this, 'messageRun', run);
        }
    }
    /**
     * The pre-parse method. This method can be overridden by plugins to define their own argument parser.
     * @param message The message that triggered the command.
     * @param parameters The raw parameters as a single string.
     * @param context The command-context used in this execution.
     */
    preParse(message, parameters, context) {
        const parser = new Lexure.Parser(this.lexer.setInput(parameters).lex()).setUnorderedStrategy(this.strategy);
        const args = new Lexure.Args(parser.parse());
        return new Args_1.Args(message, this, args, context);
    }
    /**
     * The main category for the command, if any.
     *
     * This getter retrieves the first value of {@link Command.fullCategory}, if it has at least one item, otherwise it
     * returns `null`.
     *
     * @note You can set {@link Command.Options.fullCategory} to override the built-in category resolution.
     */
    get category() {
        return this.fullCategory.length > 0 ? this.fullCategory[0] : null;
    }
    /**
     * The sub-category for the command, if any.
     *
     * This getter retrieves the second value of {@link Command.fullCategory}, if it has at least two items, otherwise
     * it returns `null`.
     *
     * @note You can set {@link Command.Options.fullCategory} to override the built-in category resolution.
     */
    get subCategory() {
        return this.fullCategory.length > 1 ? this.fullCategory[1] : null;
    }
    /**
     * The parent category for the command.
     *
     * This getter retrieves the last value of {@link Command.fullCategory}, if it has at least one item, otherwise it
     * returns `null`.
     *
     * @note You can set {@link Command.Options.fullCategory} to override the built-in category resolution.
     */
    get parentCategory() {
        return this.fullCategory.length > 1 ? this.fullCategory[this.fullCategory.length - 1] : null;
    }
    /**
     * Defines the JSON.stringify behavior of the command.
     */
    toJSON() {
        return {
            ...super.toJSON(),
            description: this.description,
            detailedDescription: this.detailedDescription,
            category: this.category
        };
    }
    /**
     * Parses the command's options and processes them, calling {@link Command#parseConstructorPreConditionsRunIn},
     * {@link Command#parseConstructorPreConditionsNsfw},
     * {@link Command#parseConstructorPreConditionsRequiredClientPermissions}, and
     * {@link Command#parseConstructorPreConditionsCooldown}.
     * @since 2.0.0
     * @param options The command options given from the constructor.
     */
    parseConstructorPreConditions(options) {
        this.parseConstructorPreConditionsRunIn(options);
        this.parseConstructorPreConditionsNsfw(options);
        this.parseConstructorPreConditionsRequiredClientPermissions(options);
        this.parseConstructorPreConditionsRequiredUserPermissions(options);
        this.parseConstructorPreConditionsCooldown(options);
    }
    /**
     * Appends the `NSFW` precondition if {@link Command.Options.nsfw} is set to true.
     * @param options The command options given from the constructor.
     */
    parseConstructorPreConditionsNsfw(options) {
        if (options.nsfw)
            this.preconditions.append("NSFW" /* NotSafeForWork */);
    }
    /**
     * Appends the `DMOnly`, `GuildOnly`, `NewsOnly`, and `TextOnly` preconditions based on the values passed in
     * {@link Command.Options.runIn}, optimizing in specific cases (`NewsOnly` + `TextOnly` = `GuildOnly`; `DMOnly` +
     * `GuildOnly` = `null`), defaulting to `null`, which doesn't add a precondition.
     * @param options The command options given from the constructor.
     */
    parseConstructorPreConditionsRunIn(options) {
        const runIn = this.resolveConstructorPreConditionsRunType(options.runIn);
        if (runIn !== null)
            this.preconditions.append(runIn);
    }
    /**
     * Appends the `ClientPermissions` precondition when {@link Command.Options.requiredClientPermissions} resolves to a
     * non-zero bitfield.
     * @param options The command options given from the constructor.
     */
    parseConstructorPreConditionsRequiredClientPermissions(options) {
        const permissions = new discord_js_1.Permissions(options.requiredClientPermissions);
        if (permissions.bitfield !== 0n) {
            this.preconditions.append({ name: "ClientPermissions" /* ClientPermissions */, context: { permissions } });
        }
    }
    /**
     * Appends the `UserPermissions` precondition when {@link Command.Options.requiredUserPermissions} resolves to a
     * non-zero bitfield.
     * @param options The command options given from the constructor.
     */
    parseConstructorPreConditionsRequiredUserPermissions(options) {
        const permissions = new discord_js_1.Permissions(options.requiredUserPermissions);
        if (permissions.bitfield !== 0n) {
            this.preconditions.append({ name: "UserPermissions" /* UserPermissions */, context: { permissions } });
        }
    }
    /**
     * Appends the `Cooldown` precondition when {@link Command.Options.cooldownLimit} and
     * {@link Command.Options.cooldownDelay} are both non-zero.
     * @param options The command options given from the constructor.
     */
    parseConstructorPreConditionsCooldown(options) {
        const { defaultCooldown } = this.container.client.options;
        // We will check for whether the command is filtered from the defaults, but we will allow overridden values to
        // be set. If an overridden value is passed, it will have priority. Otherwise it will default to 0 if filtered
        // (causing the precondition to not be registered) or the default value with a fallback to a single-use cooldown.
        const filtered = defaultCooldown?.filteredCommands?.includes(this.name) ?? false;
        const limit = options.cooldownLimit ?? (filtered ? 0 : defaultCooldown?.limit ?? 1);
        const delay = options.cooldownDelay ?? (filtered ? 0 : defaultCooldown?.delay ?? 0);
        if (limit && delay) {
            const scope = options.cooldownScope ?? defaultCooldown?.scope ?? 3 /* User */;
            const filteredUsers = options.cooldownFilteredUsers ?? defaultCooldown?.filteredUsers;
            this.preconditions.append({
                name: "Cooldown" /* Cooldown */,
                context: { scope, limit, delay, filteredUsers }
            });
        }
    }
    resolveConstructorPreConditionsRunType(runIn) {
        if ((0, utilities_1.isNullish)(runIn))
            return null;
        if (typeof runIn === 'string') {
            switch (runIn) {
                case 'DM':
                    return "DMOnly" /* DirectMessageOnly */;
                case 'GUILD_TEXT':
                    return "GuildTextOnly" /* GuildTextOnly */;
                case 'GUILD_NEWS':
                    return "GuildNewsOnly" /* GuildNewsOnly */;
                case 'GUILD_NEWS_THREAD':
                    return "GuildNewsThreadOnly" /* GuildNewsThreadOnly */;
                case 'GUILD_PUBLIC_THREAD':
                    return "GuildPublicThreadOnly" /* GuildPublicThreadOnly */;
                case 'GUILD_PRIVATE_THREAD':
                    return "GuildPrivateThreadOnly" /* GuildPrivateThreadOnly */;
                case 'GUILD_ANY':
                    return "GuildOnly" /* GuildOnly */;
                default:
                    return null;
            }
        }
        // If there's no channel it can run on, throw an error:
        if (runIn.length === 0) {
            throw new Error(`${this.constructor.name}[${this.name}]: "runIn" was specified as an empty array.`);
        }
        if (runIn.length === 1) {
            return this.resolveConstructorPreConditionsRunType(runIn[0]);
        }
        const keys = new Set(runIn);
        const dm = keys.has('DM');
        const guildText = keys.has('GUILD_TEXT');
        const guildNews = keys.has('GUILD_NEWS');
        const guild = guildText && guildNews;
        // If runs everywhere, optimise to null:
        if (dm && guild)
            return null;
        const guildPublicThread = keys.has('GUILD_PUBLIC_THREAD');
        const guildPrivateThread = keys.has('GUILD_PRIVATE_THREAD');
        const guildNewsThread = keys.has('GUILD_NEWS_THREAD');
        const guildThreads = guildPublicThread && guildPrivateThread && guildNewsThread;
        // If runs in any thread, optimise to thread-only:
        if (guildThreads && keys.size === 3) {
            return "GuildThreadOnly" /* GuildThreadOnly */;
        }
        const preconditions = new PreconditionContainerArray_1.PreconditionContainerArray();
        if (dm)
            preconditions.append("DMOnly" /* DirectMessageOnly */);
        if (guild) {
            preconditions.append("GuildOnly" /* GuildOnly */);
        }
        else {
            // GuildText includes PublicThread and PrivateThread
            if (guildText) {
                preconditions.append("GuildTextOnly" /* GuildTextOnly */);
            }
            else {
                if (guildPublicThread)
                    preconditions.append("GuildPublicThreadOnly" /* GuildPublicThreadOnly */);
                if (guildPrivateThread)
                    preconditions.append("GuildPrivateThreadOnly" /* GuildPrivateThreadOnly */);
            }
            // GuildNews includes NewsThread
            if (guildNews) {
                preconditions.append("GuildNewsOnly" /* GuildNewsOnly */);
            }
            else if (guildNewsThread) {
                preconditions.append("GuildNewsThreadOnly" /* GuildNewsThreadOnly */);
            }
        }
        return preconditions;
    }
}
exports.Command = Command;
/**
 * The allowed values for {@link Command.Options.runIn} as an enum.
 * @since 2.0.0
 */
var CommandOptionsRunTypeEnum;
(function (CommandOptionsRunTypeEnum) {
    CommandOptionsRunTypeEnum["Dm"] = "DM";
    CommandOptionsRunTypeEnum["GuildText"] = "GUILD_TEXT";
    CommandOptionsRunTypeEnum["GuildNews"] = "GUILD_NEWS";
    CommandOptionsRunTypeEnum["GuildNewsThread"] = "GUILD_NEWS_THREAD";
    CommandOptionsRunTypeEnum["GuildPublicThread"] = "GUILD_PUBLIC_THREAD";
    CommandOptionsRunTypeEnum["GuildPrivateThread"] = "GUILD_PRIVATE_THREAD";
    CommandOptionsRunTypeEnum["GuildAny"] = "GUILD_ANY";
})(CommandOptionsRunTypeEnum = exports.CommandOptionsRunTypeEnum || (exports.CommandOptionsRunTypeEnum = {}));
/**
 * The available command pre-conditions.
 * @since 2.0.0
 */
var CommandPreConditions;
(function (CommandPreConditions) {
    CommandPreConditions["Cooldown"] = "Cooldown";
    CommandPreConditions["DirectMessageOnly"] = "DMOnly";
    CommandPreConditions["GuildNewsOnly"] = "GuildNewsOnly";
    CommandPreConditions["GuildNewsThreadOnly"] = "GuildNewsThreadOnly";
    CommandPreConditions["GuildOnly"] = "GuildOnly";
    CommandPreConditions["GuildPrivateThreadOnly"] = "GuildPrivateThreadOnly";
    CommandPreConditions["GuildPublicThreadOnly"] = "GuildPublicThreadOnly";
    CommandPreConditions["GuildTextOnly"] = "GuildTextOnly";
    CommandPreConditions["GuildThreadOnly"] = "GuildThreadOnly";
    CommandPreConditions["NotSafeForWork"] = "NSFW";
    CommandPreConditions["ClientPermissions"] = "ClientPermissions";
    CommandPreConditions["UserPermissions"] = "UserPermissions";
})(CommandPreConditions = exports.CommandPreConditions || (exports.CommandPreConditions = {}));
//# sourceMappingURL=Command.js.map