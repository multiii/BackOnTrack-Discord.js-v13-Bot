"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreconditionContainerSingle = void 0;
const pieces_1 = require("@sapphire/pieces");
/**
 * An {@link IPreconditionContainer} which runs a single precondition from {@link SapphireClient.preconditions}.
 * @since 1.0.0
 */
class PreconditionContainerSingle {
    constructor(data) {
        if (typeof data === 'string') {
            this.context = {};
            this.name = data;
        }
        else {
            this.context = Reflect.get(data, 'context') ?? {};
            this.name = data.name;
        }
    }
    /**
     * Runs the container.
     * @since 1.0.0
     * @param message The message that ran this precondition.
     * @param command The command the message invoked.
     */
    messageRun(message, command, context = {}) {
        const precondition = pieces_1.container.stores.get('preconditions').get(this.name);
        if (precondition) {
            if (precondition.messageRun)
                return precondition.messageRun(message, command, { ...context, ...this.context });
            throw new Error(`The precondition "${precondition.name}" is missing a "messageRun" handler, but it was requested for the "${command.name}" command.`);
        }
        throw new Error(`The precondition "${this.name}" is not available.`);
    }
    /**
     * Runs the container.
     * @since 3.0.0
     * @param interaction The interaction that ran this precondition.
     * @param command The command the interaction invoked.
     */
    chatInputRun(interaction, command, context = {}) {
        const precondition = pieces_1.container.stores.get('preconditions').get(this.name);
        if (precondition) {
            if (precondition.chatInputRun)
                return precondition.chatInputRun(interaction, command, { ...context, ...this.context });
            throw new Error(`The precondition "${precondition.name}" is missing a "chatInputRun" handler, but it was requested for the "${command.name}" command.`);
        }
        throw new Error(`The precondition "${this.name}" is not available.`);
    }
    /**
     * Runs the container.
     * @since 3.0.0
     * @param interaction The interaction that ran this precondition.
     * @param command The command the interaction invoked.
     */
    contextMenuRun(interaction, command, context = {}) {
        const precondition = pieces_1.container.stores.get('preconditions').get(this.name);
        if (precondition) {
            if (precondition.contextMenuRun)
                return precondition.contextMenuRun(interaction, command, { ...context, ...this.context });
            throw new Error(`The precondition "${precondition.name}" is missing a "contextMenuRun" handler, but it was requested for the "${command.name}" command.`);
        }
        throw new Error(`The precondition "${this.name}" is not available.`);
    }
}
exports.PreconditionContainerSingle = PreconditionContainerSingle;
//# sourceMappingURL=PreconditionContainerSingle.js.map