"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRegistryAPICalls = exports.getDefaultBehaviorWhenNotIdentical = exports.setDefaultBehaviorWhenNotIdentical = exports.acquire = exports.registries = exports.defaultBehaviorWhenNotIdentical = void 0;
const pieces_1 = require("@sapphire/pieces");
require("../../types/Enums");
const ApplicationCommandRegistry_1 = require("./ApplicationCommandRegistry");
const emitRegistryError_1 = require("./emitRegistryError");
const getNeededParameters_1 = require("./getNeededParameters");
exports.defaultBehaviorWhenNotIdentical = "LOG_TO_CONSOLE" /* RegisterBehavior.LogToConsole */;
exports.registries = new Map();
/**
 * Acquires a registry for a command by its name.
 * @param commandName The name of the command.
 * @returns The application command registry for the command
 */
function acquire(commandName) {
    const existing = exports.registries.get(commandName);
    if (existing) {
        return existing;
    }
    const newRegistry = new ApplicationCommandRegistry_1.ApplicationCommandRegistry(commandName);
    exports.registries.set(commandName, newRegistry);
    return newRegistry;
}
exports.acquire = acquire;
/**
 * Sets the default behavior when registered commands aren't identical to provided data.
 * @param behavior The default behavior to have. Set this to `null` to reset it to the default
 * of `RegisterBehavior.LogToConsole`.
 */
function setDefaultBehaviorWhenNotIdentical(behavior) {
    exports.defaultBehaviorWhenNotIdentical = behavior ?? "LOG_TO_CONSOLE" /* RegisterBehavior.LogToConsole */;
}
exports.setDefaultBehaviorWhenNotIdentical = setDefaultBehaviorWhenNotIdentical;
function getDefaultBehaviorWhenNotIdentical() {
    return exports.defaultBehaviorWhenNotIdentical;
}
exports.getDefaultBehaviorWhenNotIdentical = getDefaultBehaviorWhenNotIdentical;
async function handleRegistryAPICalls() {
    const commandStore = pieces_1.container.stores.get('commands');
    for (const command of commandStore.values()) {
        try {
            await command.registerApplicationCommands(command.applicationCommandRegistry);
        }
        catch (error) {
            (0, emitRegistryError_1.emitRegistryError)(error, command);
        }
    }
    const { applicationCommands, globalCommands, guildCommands } = await (0, getNeededParameters_1.getNeededRegistryParameters)();
    for (const registry of exports.registries.values()) {
        // eslint-disable-next-line @typescript-eslint/dot-notation
        await registry['runAPICalls'](applicationCommands, globalCommands, guildCommands);
        const piece = registry.command;
        if (piece) {
            for (const nameOrId of piece.applicationCommandRegistry.chatInputCommands) {
                commandStore.aliases.set(nameOrId, piece);
            }
            for (const nameOrId of piece.applicationCommandRegistry.contextMenuCommands) {
                commandStore.aliases.set(nameOrId, piece);
            }
        }
    }
}
exports.handleRegistryAPICalls = handleRegistryAPICalls;
//# sourceMappingURL=ApplicationCommandRegistries.js.map