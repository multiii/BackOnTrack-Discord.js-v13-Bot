"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SapphireClient = void 0;
const pieces_1 = require("@sapphire/pieces");
const discord_js_1 = require("discord.js");
const path_1 = require("path");
const PluginManager_1 = require("./plugins/PluginManager");
const ArgumentStore_1 = require("./structures/ArgumentStore");
const CommandStore_1 = require("./structures/CommandStore");
const ListenerStore_1 = require("./structures/ListenerStore");
const PreconditionStore_1 = require("./structures/PreconditionStore");
require("./types/Enums");
const Events_1 = require("./types/Events");
require("./utils/logger/ILogger");
const Logger_1 = require("./utils/logger/Logger");
/**
 * The base {@link Client} extension that makes Sapphire work. When building a Discord bot with the framework, the developer
 * must either use this class, or extend it.
 *
 * Sapphire also automatically detects the folders to scan for pieces, please read {@link StoreRegistry.registerPath}
 * for reference. This method is called at the start of the {@link SapphireClient.login} method.
 *
 * @see {@link SapphireClientOptions} for all options available to the Sapphire Client. You can also provide all of discord.js' [ClientOptions](https://discord.js.org/#/docs/main/stable/typedef/ClientOptions)
 *
 * @since 1.0.0
 * @example
 * ```typescript
 * const client = new SapphireClient({
 *   presence: {
 *     activity: {
 *       name: 'for commands!',
 *       type: 'LISTENING'
 *     }
 *   }
 * });
 *
 * client.login(process.env.DISCORD_TOKEN)
 *   .catch(console.error);
 * ```
 *
 * @example
 * ```typescript
 * // Automatically scan from a specific directory, e.g. the main
 * // file is at `/home/me/bot/index.js` and all your pieces are at
 * // `/home/me/bot/pieces` (e.g. `/home/me/bot/pieces/commands/MyCommand.js`):
 * const client = new SapphireClient({
 *   baseUserDirectory: join(__dirname, 'pieces'),
 *   // More options...
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Opt-out automatic scanning:
 * const client = new SapphireClient({
 *   baseUserDirectory: null,
 *   // More options...
 * });
 * ```
 */
class SapphireClient extends discord_js_1.Client {
    constructor(options) {
        super(options);
        /**
         * The client's ID, used for the user prefix.
         * @since 1.0.0
         */
        this.id = null;
        pieces_1.container.client = this;
        for (const plugin of SapphireClient.plugins.values("preGenericsInitialization" /* PreGenericsInitialization */)) {
            plugin.hook.call(this, options);
            this.emit(Events_1.Events.PluginLoaded, plugin.type, plugin.name);
        }
        this.logger = options.logger?.instance ?? new Logger_1.Logger(options.logger?.level ?? 30 /* Info */);
        pieces_1.container.logger = this.logger;
        if (options.enableLoaderTraceLoggings ?? pieces_1.container.logger.has(10 /* Trace */)) {
            pieces_1.Store.logger = pieces_1.container.logger.trace.bind(pieces_1.container.logger);
        }
        this.stores = new pieces_1.StoreRegistry();
        pieces_1.container.stores = this.stores;
        this.fetchPrefix = options.fetchPrefix ?? (() => this.options.defaultPrefix ?? null);
        this.disableMentionPrefix = options.disableMentionPrefix;
        for (const plugin of SapphireClient.plugins.values("preInitialization" /* PreInitialization */)) {
            plugin.hook.call(this, options);
            this.emit(Events_1.Events.PluginLoaded, plugin.type, plugin.name);
        }
        this.id = options.id ?? null;
        this.stores
            .register(new ArgumentStore_1.ArgumentStore().registerPath((0, path_1.join)(__dirname, '..', 'arguments'))) //
            .register(new CommandStore_1.CommandStore())
            .register(new ListenerStore_1.ListenerStore().registerPath((0, path_1.join)(__dirname, '..', 'listeners')))
            .register(new PreconditionStore_1.PreconditionStore().registerPath((0, path_1.join)(__dirname, '..', 'preconditions')));
        if (options.loadDefaultErrorListeners !== false)
            this.stores.get('listeners').registerPath((0, path_1.join)(__dirname, '..', 'errorListeners'));
        for (const plugin of SapphireClient.plugins.values("postInitialization" /* PostInitialization */)) {
            plugin.hook.call(this, options);
            this.emit(Events_1.Events.PluginLoaded, plugin.type, plugin.name);
        }
    }
    /**
     * Loads all pieces, then logs the client in, establishing a websocket connection to Discord.
     * @since 1.0.0
     * @param token Token of the account to log in with.
     * @return Token of the account used.
     */
    async login(token) {
        // Register the user directory if not null:
        if (this.options.baseUserDirectory !== null) {
            this.stores.registerPath(this.options.baseUserDirectory);
        }
        // Call pre-login plugins:
        for (const plugin of SapphireClient.plugins.values("preLogin" /* PreLogin */)) {
            await plugin.hook.call(this, this.options);
            this.emit(Events_1.Events.PluginLoaded, plugin.type, plugin.name);
        }
        // Loads all stores, then call login:
        await Promise.all([...this.stores.values()].map((store) => store.loadAll()));
        const login = await super.login(token);
        // Call post-login plugins:
        for (const plugin of SapphireClient.plugins.values("postLogin" /* PostLogin */)) {
            await plugin.hook.call(this, this.options);
            this.emit(Events_1.Events.PluginLoaded, plugin.type, plugin.name);
        }
        return login;
    }
    static use(plugin) {
        this.plugins.use(plugin);
        return this;
    }
}
exports.SapphireClient = SapphireClient;
SapphireClient.plugins = new PluginManager_1.PluginManager();
//# sourceMappingURL=SapphireClient.js.map