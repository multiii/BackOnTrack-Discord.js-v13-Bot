"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Events = void 0;
const discord_js_1 = require("discord.js");
exports.Events = {
    // #region Discord.js base events
    ChannelCreate: discord_js_1.Constants.Events.CHANNEL_CREATE,
    ChannelDelete: discord_js_1.Constants.Events.CHANNEL_DELETE,
    ChannelPinsUpdate: discord_js_1.Constants.Events.CHANNEL_PINS_UPDATE,
    ChannelUpdate: discord_js_1.Constants.Events.CHANNEL_UPDATE,
    ClientReady: discord_js_1.Constants.Events.CLIENT_READY,
    Debug: discord_js_1.Constants.Events.DEBUG,
    Error: discord_js_1.Constants.Events.ERROR,
    GuildBanAdd: discord_js_1.Constants.Events.GUILD_BAN_ADD,
    GuildBanRemove: discord_js_1.Constants.Events.GUILD_BAN_REMOVE,
    GuildCreate: discord_js_1.Constants.Events.GUILD_CREATE,
    GuildDelete: discord_js_1.Constants.Events.GUILD_DELETE,
    GuildEmojiCreate: discord_js_1.Constants.Events.GUILD_EMOJI_CREATE,
    GuildEmojiDelete: discord_js_1.Constants.Events.GUILD_EMOJI_DELETE,
    GuildEmojiUpdate: discord_js_1.Constants.Events.GUILD_EMOJI_UPDATE,
    GuildIntegrationsUpdate: discord_js_1.Constants.Events.GUILD_INTEGRATIONS_UPDATE,
    GuildMemberAdd: discord_js_1.Constants.Events.GUILD_MEMBER_ADD,
    GuildMemberAvailable: discord_js_1.Constants.Events.GUILD_MEMBER_AVAILABLE,
    GuildMemberRemove: discord_js_1.Constants.Events.GUILD_MEMBER_REMOVE,
    GuildMembersChunk: discord_js_1.Constants.Events.GUILD_MEMBERS_CHUNK,
    GuildMemberUpdate: discord_js_1.Constants.Events.GUILD_MEMBER_UPDATE,
    GuildRoleCreate: discord_js_1.Constants.Events.GUILD_ROLE_CREATE,
    GuildRoleDelete: discord_js_1.Constants.Events.GUILD_ROLE_DELETE,
    GuildRoleUpdate: discord_js_1.Constants.Events.GUILD_ROLE_UPDATE,
    GuildStickerCreate: discord_js_1.Constants.Events.GUILD_STICKER_CREATE,
    GuildStickerDelete: discord_js_1.Constants.Events.GUILD_STICKER_DELETE,
    GuildStickerUpdate: discord_js_1.Constants.Events.GUILD_STICKER_UPDATE,
    GuildUnavailable: discord_js_1.Constants.Events.GUILD_UNAVAILABLE,
    GuildUpdate: discord_js_1.Constants.Events.GUILD_UPDATE,
    InteractionCreate: discord_js_1.Constants.Events.INTERACTION_CREATE,
    Invalidated: discord_js_1.Constants.Events.INVALIDATED,
    InvalidRequestWarning: discord_js_1.Constants.Events.INVALID_REQUEST_WARNING,
    InviteCreate: discord_js_1.Constants.Events.INVITE_CREATE,
    InviteDelete: discord_js_1.Constants.Events.INVITE_DELETE,
    MessageBulkDelete: discord_js_1.Constants.Events.MESSAGE_BULK_DELETE,
    MessageCreate: discord_js_1.Constants.Events.MESSAGE_CREATE,
    MessageDelete: discord_js_1.Constants.Events.MESSAGE_DELETE,
    MessageReactionAdd: discord_js_1.Constants.Events.MESSAGE_REACTION_ADD,
    MessageReactionRemove: discord_js_1.Constants.Events.MESSAGE_REACTION_REMOVE,
    MessageReactionRemoveAll: discord_js_1.Constants.Events.MESSAGE_REACTION_REMOVE_ALL,
    MessageReactionRemoveEmoji: discord_js_1.Constants.Events.MESSAGE_REACTION_REMOVE_EMOJI,
    MessageUpdate: discord_js_1.Constants.Events.MESSAGE_UPDATE,
    PresenceUpdate: discord_js_1.Constants.Events.PRESENCE_UPDATE,
    RateLimit: discord_js_1.Constants.Events.RATE_LIMIT,
    Raw: discord_js_1.Constants.Events.RAW,
    ShardDisconnect: discord_js_1.Constants.Events.SHARD_DISCONNECT,
    ShardError: discord_js_1.Constants.Events.SHARD_ERROR,
    ShardReady: discord_js_1.Constants.Events.SHARD_READY,
    ShardReconnecting: discord_js_1.Constants.Events.SHARD_RECONNECTING,
    ShardResume: discord_js_1.Constants.Events.SHARD_RESUME,
    StageInstanceCreate: discord_js_1.Constants.Events.STAGE_INSTANCE_CREATE,
    StageInstanceDelete: discord_js_1.Constants.Events.STAGE_INSTANCE_DELETE,
    StageInstanceUpdate: discord_js_1.Constants.Events.STAGE_INSTANCE_UPDATE,
    ThreadCreate: discord_js_1.Constants.Events.THREAD_CREATE,
    ThreadDelete: discord_js_1.Constants.Events.THREAD_DELETE,
    ThreadListSync: discord_js_1.Constants.Events.THREAD_LIST_SYNC,
    ThreadMembersUpdate: discord_js_1.Constants.Events.THREAD_MEMBERS_UPDATE,
    ThreadMemberUpdate: discord_js_1.Constants.Events.THREAD_MEMBER_UPDATE,
    ThreadUpdate: discord_js_1.Constants.Events.THREAD_UPDATE,
    TypingStart: discord_js_1.Constants.Events.TYPING_START,
    UserUpdate: discord_js_1.Constants.Events.USER_UPDATE,
    VoiceServerUpdate: discord_js_1.Constants.Events.VOICE_SERVER_UPDATE,
    VoiceStateUpdate: discord_js_1.Constants.Events.VOICE_STATE_UPDATE,
    Warn: discord_js_1.Constants.Events.WARN,
    WebhooksUpdate: discord_js_1.Constants.Events.WEBHOOKS_UPDATE,
    // #endregion Discord.js base events
    // #region Sapphire events
    // Message commands chain
    /**
     * Emitted when a message is created that was not sent by bots or webhooks.
     * @param {Message} message The created message
     */
    PreMessageParsed: 'preMessageParsed',
    /**
     * Emitted when a message is created consisting of only the bot's mention.
     * @param {Message} message The created message
     */
    MentionPrefixOnly: 'mentionPrefixOnly',
    /**
     * Emitted when a message is created that does not start with a valid prefix.
     * @param {Message} message The created message
     */
    NonPrefixedMessage: 'nonPrefixedMessage',
    /**
     * Emitted when a message is created that does starts with a valid prefix.
     * @param {Message} message The created message
     */
    PrefixedMessage: 'prefixedMessage',
    /**
     * Emitted when a message starts with a valid prefix but does not include a command name.
     * @param {UnknownMessageCommandNamePayload} payload
     */
    UnknownMessageCommandName: 'unknownMessageCommandName',
    /**
     * Emitted when the name of a sent message command does not match any loaded commands.
     * @param {UnknownMessageCommandPayload} payload The contextual payload
     */
    UnknownMessageCommand: 'unknownMessageCommand',
    /**
     * Emitted when a message command is executed but a `messageRun` method is not found.
     * @param {CommandDoesNotHaveMessageCommandHandler} payload The contextual payload
     */
    CommandDoesNotHaveMessageCommandHandler: 'commandDoesNotHaveMessageCommandHandler',
    /**
     * Emitted before the `messageRun` method of a command is run.
     * @param {PreMessageCommandRunPayload} payload The contextual payload
     */
    PreMessageCommandRun: 'preMessageCommandRun',
    /**
     * Emitted when a precondition denies a message command from being run.
     * @param {UserError} error The error reported by the precondition
     * @param {MessageCommandDeniedPayload} payload The contextual payload
     */
    MessageCommandDenied: 'messageCommandDenied',
    /**
     * Emitted when a message command passes all precondition checks, if any.
     * @param {MessageCommandAcceptedPayload} payload The contextual payload
     */
    MessageCommandAccepted: 'messageCommandAccepted',
    /**
     * Emitted directly before a message command is run.
     * @param {Message} message The message that executed the command
     * @param {Command} command The command that is being run
     * @param {MessageCommandRunPayload} payload The contextual payload
     */
    MessageCommandRun: 'messageCommandRun',
    /**
     * Emitted after a message command runs successfully.
     * @param {MessageCommandSuccessPayload} payload The contextual payload
     */
    MessageCommandSuccess: 'messageCommandSuccess',
    /**
     * Emitted after a message command runs unsuccesfully.
     * @param {*} error The error that was thrown
     * @param {MessageCommandErrorPayload} payload The contextual payload
     */
    MessageCommandError: 'messageCommandError',
    /**
     * Emitted directly after a message command finished running, regardless of the outcome.
     * @param {Message} message The message that executed the command
     * @param {Command} command The command that finished running
     * @param {MessageCommandFinishPayload} payload The contextual payload
     */
    MessageCommandFinish: 'messageCommandFinish',
    /**
     * Emitted after the bot unsuccessfully tried to start typing when a command is executed.
     * @param error The error that was thrown
     * @param payload The contextual payload
     */
    MessageCommandTypingError: 'messageCommandTypingError',
    // Listener errors
    /**
     * Emitted when an error is encountered when executing a listener.
     * @param {*} error The error that was thrown
     * @param {ListenerErrorPayload} payload The contextual payload
     */
    ListenerError: 'listenerError',
    // Registry errors
    /**
     * Emitted when an error is encountered when handling the command application command registry.
     * @param {*} error The error that was thrown
     * @param {Command} command The command who's registry caused the error
     */
    CommandApplicationCommandRegistryError: 'commandApplicationCommandRegistryError',
    // Piece store?
    /**
     * Emitted after a piece is loaded.
     * @param {Store<Piece>} store The store in which the piece belongs to
     * @param {Piece} piece The piece that was loaded
     */
    PiecePostLoad: 'piecePostLoad',
    /**
     * Emitted when a piece is unloaded.
     * @param {Store<Piece>} store The store in which the piece belongs to
     * @param {Piece} piece The piece that was unloaded
     */
    PieceUnload: 'pieceUnload',
    // Plugin
    /**
     * Emitted when a plugin is loaded.
     * @param {PluginHook} hook The plugin hook that was loaded
     * @param {string | undefined} name The name of the plugin, if any
     */
    PluginLoaded: 'pluginLoaded',
    // Interaction handlers
    /**
     * Emitted when the `parse` method of an interaction handler encounters an error.
     * @param {*} error The error that was encountered
     * @param {InteractionHandlerParseError} payload The contextual payload
     */
    InteractionHandlerParseError: 'interactionHandlerParseError',
    /**
     * Emitted when an error is encountered when executing an interaction handler.
     * @param {*} error The error that was encountered
     * @param {InteractionHandlerError} payload The contextual payload
     */
    InteractionHandlerError: 'interactionHandlerError',
    // Autocomplete interaction
    /**
     * Emitted when an autocomplete interaction is recieved.
     * @param {AutocompleteInteraction} interaction The interaction that was recieved
     */
    PossibleAutocompleteInteraction: 'possibleAutocompleteInteraction',
    /**
     * Emitted after an autocomplete interaction handler runs successfully.
     * @param {AutocompleteInteractionPayload} payload The contextual payload
     */
    CommandAutocompleteInteractionSuccess: 'commandAutocompleteInteractionSuccess',
    /**
     * Emitted when an error is encountered when executing an autocomplete interaction handler.
     * @param {*} error The error that was encountered
     * @param {AutocompleteInteractionPayload} payload The contextual payload
     */
    CommandAutocompleteInteractionError: 'commandAutocompleteInteractionError',
    // Chat input command chain
    /**
     * Emitted when a chat input command interaction is recieved.
     * @param {CommandInteraction} interaction The interaction that was recieved.
     */
    PossibleChatInputCommand: 'possibleChatInputCommand',
    /**
     * Emitted when the name of a sent chat input command does not match any loaded commands.
     * @param {UnknownChatInputCommandPayload} payload The contextual payload
     */
    UnknownChatInputCommand: 'unknownChatInputCommand',
    /**
     * Emitted when a chat input command is executed but a `chatInputRun` method is not found.
     * @param {CommandDoesNotHaveChatInputCommandHandlerPayload} payload The contextual payload
     */
    CommandDoesNotHaveChatInputCommandHandler: 'commandDoesNotHaveChatInputCommandHandler',
    /**
     * Emitted before the `chatInputRun` method of a command is run.
     * @param {PreChatInputCommandRunPayload} payload The contextual payload
     */
    PreChatInputCommandRun: 'preChatInputCommandRun',
    /**
     * Emitted when a precondition denies a chat input command from being run.
     * @param {UserError} error The error reported by the precondition
     * @param {ChatInputCommandDeniedPayload} payload The contextual payload
     */
    ChatInputCommandDenied: 'chatInputCommandDenied',
    /**
     * Emitted when a chat input command passes all precondition checks, if any.
     * @param {ChatInputCommandAcceptedPayload} payload The contextual payload
     */
    ChatInputCommandAccepted: 'chatInputCommandAccepted',
    /**
     * Emitted directly before a chat input command is run.
     * @param {CommandInteraction} interaction The interaction that executed the command
     * @param {ChatInputCommand} command The command that is being run
     * @param {ChatInputCommandRunPayload} payload The contextual payload
     */
    ChatInputCommandRun: 'chatInputCommandRun',
    /**
     * Emitted after a chat input command runs successfully.
     * @param {ChatInputCommandSuccessPayload} payload The contextual payload
     */
    ChatInputCommandSuccess: 'chatInputCommandSuccess',
    /**
     * Emitted after a chat input command runs unsuccesfully.
     * @param {*} error The error that was thrown
     * @param {ChatInputCommandErrorPayload} payload The contextual payload
     */
    ChatInputCommandError: 'chatInputCommandError',
    /**
     * Emitted directly after a chat input command finished running, regardless of the outcome.
     * @param {Interaction} interaction The interaction that executed the command
     * @param {ChatInputCommand} command The command that finished running
     * @param {ChatInputCommandFinishPayload} payload The contextual payload
     */
    ChatInputCommandFinish: 'chatInputCommandFinish',
    // Context menu chain
    /**
     * Emitted when a context menu interaction is recieved.
     * @param {ContextMenuInteraction} interaction The interaction that was recieved.
     */
    PossibleContextMenuCommand: 'possibleContextMenuCommand',
    /**
     * Emitted when the name of a sent context menu command does not match any loaded commands.
     * @param {UnknownContextMenuCommandPayload} payload The contextual payload
     */
    UnknownContextMenuCommand: 'unknownContextMenuCommand',
    /**
     * Emitted when a chat input command is executed but a `contextMenuRun` method is not found.
     * @param {CommandDoesNotHaveContextMenuCommandHandlerPayload} payload The contextual payload
     */
    CommandDoesNotHaveContextMenuCommandHandler: 'commandDoesNotHaveContextMenuCommandHandler',
    /**
     * Emitted before the `contextMenuRun` method of a command is run.
     * @param {PreContextMenuCommandRunPayload} payload The contextual payload
     */
    PreContextMenuCommandRun: 'preContextMenuCommandRun',
    /**
     * Emitted when a precondition denies a context menu command from being run.
     * @param {UserError} error The error reported by the precondition
     * @param {ContextMenuCommandDeniedPayload} payload The contextual payload
     */
    ContextMenuCommandDenied: 'contextMenuCommandDenied',
    /**
     * Emitted when a context menu command passes all precondition checks, if any.
     * @param {ContextMenuCommandAcceptedPayload} payload The contextual payload
     */
    ContextMenuCommandAccepted: 'contextMenuCommandAccepted',
    /**
     * Emitted directly before a context menu command is run.
     * @param {ContextMenuInteraction} interaction The interaction that executed the command
     * @param {ContextMenuCommand} command The command that is being run
     * @param {ContextMenuCommandRunPayload} payload The contextual payload
     */
    ContextMenuCommandRun: 'contextMenuCommandRun',
    /**
     * Emitted after a context menu command runs successfully.
     * @param {ContextMenuCommandSuccessPayload} payload The contextual payload
     */
    ContextMenuCommandSuccess: 'contextMenuCommandSuccess',
    /**
     * Emitted after a context menu command runs unsuccesfully.
     * @param {*} error The error that was thrown
     * @param {ContextMenuCommandErrorPayload} payload The contextual payload
     */
    ContextMenuCommandError: 'contextMenuCommandError',
    /**
     * Emitted directly after a context menu command finished running, regardless of the outcome.
     * @param {Interaction} interaction The interaction that executed the command
     * @param {ContextMenuCommand} command The command that finished running
     * @param {ContextMenuCommandFinishPayload} payload The contextual payload
     */
    ContextMenuCommandFinish: 'contextMenuCommandFinish'
    // #endregion Sapphire events
};
//# sourceMappingURL=Events.js.map