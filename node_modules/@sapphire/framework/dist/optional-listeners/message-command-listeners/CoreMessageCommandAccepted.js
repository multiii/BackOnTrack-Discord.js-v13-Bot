"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreListener = void 0;
const result_1 = require("@sapphire/result");
const stopwatch_1 = require("@sapphire/stopwatch");
const Listener_1 = require("../../lib/structures/Listener");
const Events_1 = require("../../lib/types/Events");
class CoreListener extends Listener_1.Listener {
    constructor(context) {
        super(context, { event: Events_1.Events.MessageCommandAccepted });
    }
    async run(payload) {
        const { message, command, parameters, context } = payload;
        const args = await command.messagePreParse(message, parameters, context);
        const result = await (0, result_1.fromAsync)(async () => {
            message.client.emit(Events_1.Events.MessageCommandRun, message, command, { ...payload, args });
            const stopwatch = new stopwatch_1.Stopwatch();
            const result = await command.messageRun(message, args, context);
            const { duration } = stopwatch.stop();
            message.client.emit(Events_1.Events.MessageCommandSuccess, { ...payload, args, result, duration });
            return duration;
        });
        if ((0, result_1.isErr)(result)) {
            message.client.emit(Events_1.Events.MessageCommandError, result.error, { ...payload, args, duration: result.value ?? -1 });
        }
        message.client.emit(Events_1.Events.MessageCommandFinish, message, command, { ...payload, args, duration: result.value ?? -1 });
    }
}
exports.CoreListener = CoreListener;
//# sourceMappingURL=CoreMessageCommandAccepted.js.map