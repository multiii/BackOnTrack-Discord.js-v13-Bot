"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Piece = void 0;
const Container_1 = require("../shared/Container");
const PieceLocation_1 = require("./PieceLocation");
/**
 * The piece to be stored in {@link Store} instances.
 */
class Piece {
    constructor(context, options = {}) {
        /**
         * The store that contains the piece.
         */
        Object.defineProperty(this, "store", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The location metadata for the piece's file.
         */
        Object.defineProperty(this, "location", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The name of the piece.
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether or not the piece is enabled.
         */
        Object.defineProperty(this, "enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The raw options passed to this {@link Piece}
         */
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.store = context.store;
        this.location = new PieceLocation_1.PieceLocation(context.path, context.root);
        this.name = options.name ?? context.name;
        this.enabled = options.enabled ?? true;
        this.options = options;
    }
    /**
     * A reference to the {@link Container} object for ease of use.
     * @see container
     */
    get container() {
        return Container_1.container;
    }
    /**
     * Per-piece listener that is called when the piece is loaded into the store.
     * Useful to set-up asynchronous initialization tasks.
     */
    onLoad() {
        return undefined;
    }
    /**
     * Per-piece listener that is called when the piece is unloaded from the store.
     * Useful to set-up clean-up tasks.
     */
    onUnload() {
        return undefined;
    }
    /**
     * Unloads and disables the piece.
     */
    async unload() {
        await this.store.unload(this.name);
        this.enabled = false;
    }
    /**
     * Reloads the piece by loading the same path in the store.
     */
    async reload() {
        await this.store.load(this.location.root, this.location.relative);
    }
    /**
     * Defines the `JSON.stringify` behavior of this piece.
     */
    toJSON() {
        return {
            location: this.location.toJSON(),
            name: this.name,
            enabled: this.enabled,
            options: this.options
        };
    }
}
exports.Piece = Piece;
(function (Piece) {
    Piece.Location = PieceLocation_1.PieceLocation;
})(Piece = exports.Piece || (exports.Piece = {}));
//# sourceMappingURL=Piece.js.map