"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.orResultLast = exports.orResultFirst = exports.orResultAll = exports.maybeResult = exports.err_ = exports.err = exports.ok = void 0;
/**
 * Creates an Ok.
 * @typeparam T - Type of results.
 * @param x - Value to use.
 * @returns A Result.
 */
function ok(x) {
    return { success: true, value: x };
}
exports.ok = ok;
/**
 * Creates an Err.
 * @typeparam E - Type of errors.
 * @param x - Value to use.
 * @returns A Result.
 */
function err(x) {
    return { success: false, error: x };
}
exports.err = err;
/**
 * Creates an Err with null value.
 * @returns A Result.
 */
function err_() {
    return { success: false, error: null };
}
exports.err_ = err_;
/**
 * Creates a Result from a value that could be null or undefined.
 *
 * ```ts
 * console.log(maybeResult(1, 'bad'));
 * >>> { success: true, value: 1 }
 *
 * console.log(maybeResult(null, 'bad'));
 * >>> { success: false, error: 'bad' }
 *
 * console.log(maybeResult(undefined, 'bad'));
 * >>> { success: false, error: 'bad' }
 * ```
 * @param x - A nullable value.
 * @param e - The error to use.
 * @returns A Result.
 */
function maybeResult(x, e) {
    if (x == null) {
        return err(e);
    }
    return ok(x);
}
exports.maybeResult = maybeResult;
/**
 * Gets the first Ok from many Results.
 * @param x - The first Result.
 * @param xs - The remaining Results; this encoding is to ensure there is at least one Result.
 * @return The first Ok, or all the Errs if there were no Ok.
 */
function orResultAll(x, ...xs) {
    if (x.success) {
        return x;
    }
    const es = [x.error];
    for (const x of xs) {
        if (x.success) {
            return x;
        }
        es.push(x.error);
    }
    return err(es);
}
exports.orResultAll = orResultAll;
/**
 * Gets the first Ok from many Results.
 * @param x - The first Result.
 * @param xs - The remaining Results; this encoding is to ensure there is at least one Result.
 * @return The first Ok, or the first Err if there were no Ok.
 */
function orResultFirst(x, ...xs) {
    if (x.success) {
        return x;
    }
    const e = x.error;
    for (const x of xs) {
        if (x.success) {
            return x;
        }
    }
    return err(e);
}
exports.orResultFirst = orResultFirst;
/**
 * Gets the first Ok from many Results.
 * @param x - The first Result.
 * @param xs - The remaining Results; this encoding is to ensure there is at least one Result.
 * @return The first Ok, or the last Err if there were no Ok.
 */
function orResultLast(x, ...xs) {
    if (x.success) {
        return x;
    }
    let e = x.error;
    for (const x of xs) {
        if (x.success) {
            return x;
        }
        e = x.error;
    }
    return err(e);
}
exports.orResultLast = orResultLast;
//# sourceMappingURL=result.js.map