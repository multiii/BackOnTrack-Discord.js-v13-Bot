import { Option } from './option';
import { Result } from './result';
import { LoopAction } from './loopAction';
/**
 * Converts an Option to a Result.
 * - Some -> Ok
 * - None -> Err
 * @param x - The Option.
 * @param error - The error if None.
 * @returns A Result.
 */
export declare function someToOk<T, E>(x: Option<T>, error: E): Result<T, E>;
/**
 * Converts a Result to an Option.
 * - Ok -> Some
 * - Err -> None
 * @param x - The Result.
 * @returns An Option.
 */
export declare function okToSome<T, E>(x: Result<T, E>): Option<T>;
/**
 * Converts a Result to an Option.
 * - Ok -> None
 * - Err -> Some
 * @param x - The Result.
 * @returns An Option.
 */
export declare function errToSome<T, E>(x: Result<T, E>): Option<E>;
/**
 * Converts an Option to a LoopAction.
 * - Some -> Step
 * - None -> Fail
 * @param x - The Option.
 * @param error - The error if None.
 * @returns A LoopAction.
 */
export declare function someToStep<A, B, E>(x: Option<A>, error: E): LoopAction<A, B, E>;
/**
 * Converts an Option to a LoopAction.
 * - Some -> Finish
 * - None -> Fail
 * @param x - The Option.
 * @param error - The error if None.
 * @returns A LoopAction.
 */
export declare function someToFinish<A, B, E>(x: Option<B>, error: E): LoopAction<A, B, E>;
/**
 * Converts a Result to a LoopAction.
 * - Ok -> Step
 * - Err -> Fail
 * @param x - The Result.
 * @returns A LoopAction.
 */
export declare function okToStep<A, B, E>(x: Result<A, E>): LoopAction<A, B, E>;
/**
 * Converts a Result to a LoopAction.
 * - Ok -> Finish
 * - Err -> Fail
 * @param x - The Result.
 * @returns A LoopAction.
 */
export declare function okToFinish<A, B, E>(x: Result<B, E>): LoopAction<A, B, E>;
